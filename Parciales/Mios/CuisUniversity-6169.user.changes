

----STARTUP---- (14 March 2024 19:44:00) as /home/felipe/Escritorio/CUIS/linux64/CuisUniversity-6169.image!


ObjectBuilder create: #Pepe
	collaboratorNames: ''
	in: 'Ejercicio 2'
	!

!classDefinition: #Pepe category: #'Ejercicio 2' stamp: 'fi 3/14/2024 19:49:05'!
DenotativeObject subclass: #Pepe
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 2'!

!classDefinition: 'Pepe class' category: #'Ejercicio 2' stamp: 'fi 3/14/2024 19:49:05'!
Pepe class
	instanceVariableNames: ''!

hola!

----STARTUP---- (18 March 2024 20:54:29) as /home/felipe/Escritorio/CUIS/linux64/CuisUniversity-6169.image!


ObjectBuilder create: #Pepe
	collaboratorNames: ''
	in: 'Ejercicio 1'
	!

!classDefinition: #Pepe category: #'Ejercicio 1' stamp: 'FB 3/18/2024 20:59:33'!
DenotativeObject subclass: #Pepe
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 1'!

!classDefinition: 'Pepe class' category: #'Ejercicio 1' stamp: 'FB 3/18/2024 20:59:33'!
Pepe class
	instanceVariableNames: ''!
!Pepe class methodsFor: '-- all --' stamp: 'FB 3/18/2024 21:00:02'!
hola^'chau'! !

Pepe hola!

ObjectBuilder create: #Bill
	collaboratorNames: 'energia'
	in: 'Ejercicio 2'
	!

!classDefinition: #Bill category: #'Ejercicio 2' stamp: 'FB 3/18/2024 21:01:38'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 2'!

!classDefinition: 'Bill class' category: #'Ejercicio 2' stamp: 'FB 3/18/2024 21:01:38'!
Bill class
	instanceVariableNames: 'energia'!
!Bill class methodsFor: 'no messages' stamp: 'FB 3/18/2024 21:02:46'!
energia
	^energia! !
!Bill class methodsFor: '-- all --' stamp: 'FB 3/18/2024 21:04:13' prior: 50526844!
energia
	^energia! !
!Bill class methodsFor: '-- all --' stamp: 'FB 3/18/2024 21:04:18' prior: 50526848!
energia^energia! !

bill energia!

Bill energia!
!Bill class methodsFor: '-- all --' stamp: 'FB 3/18/2024 21:04:44' prior: 50526852!
energia
	^energia! !
!Bill class methodsFor: '-- all --' stamp: 'FB 3/18/2024 21:10:37'!
comer: cantidadDeKilosDeCerebro
	energia += cantidadDeKilosDeCerebro/4! !
!Bill class methodsFor: '-- all --' stamp: 'FB 3/18/2024 21:11:08' prior: 50526860!
comer: cantidadDeKilosDeCerebro
	energia = energia + (cantidadDeKilosDeCerebro/4)! !

Bill energia!

Bill comer: 4!

Bill comer: 4!
!Bill class methodsFor: '-- all --' stamp: 'FB 3/18/2024 21:16:16' prior: 50526865!
comer: cantidadDeKilosDeCerebro
	energia := energia + (cantidadDeKilosDeCerebro/4)! !

Bill comer: 4!

 Bill .!

Bill energia !
!Bill class methodsFor: '-- all --' stamp: 'FB 3/18/2024 21:18:36' prior: 50526872!
comer: cantidadDeKilosDeCerebro
	energia := energia + ((cantidadDeKilosDeCerebro/4) * day )! !

Bill energia!

Bill energia!

Bill comer: 4!

 Bill .!
!Bill class methodsFor: '-- all --' stamp: 'FB 3/18/2024 21:20:25'!
caminar: cantidadDeKilometros! !
!Bill class methodsFor: '-- all --' stamp: 'FB 3/18/2024 21:22:20' prior: 50526886!
caminar: cantidadDeKilometros
	energia := energia - (3 + cantidadDeKilometros)! !

Bill caminar: 1!

 Bill .!
!Bill class methodsFor: '-- all --' stamp: 'FB 3/18/2024 21:23:04' prior: 50526890!
caminar: cantidadDeKilometros
	energia := energia - ((3 + cantidadDeKilometros) * day)! !

Bill caminar: 1!

 Bill .!

ObjectBuilder create: #Verdadero
	collaboratorNames: ''
	in: 'Ejercicio 3'
	!

!classDefinition: #Verdadero category: #'Ejercicio 3' stamp: 'FB 3/18/2024 21:25:31'!
DenotativeObject subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 3'!

!classDefinition: 'Verdadero class' category: #'Ejercicio 3' stamp: 'FB 3/18/2024 21:25:31'!
Verdadero class
	instanceVariableNames: ''!

ObjectBuilder create: #Falso
	collaboratorNames: ''
	in: 'Ejercicio 3'
	!

!classDefinition: #Falso category: #'Ejercicio 3' stamp: 'FB 3/18/2024 21:25:38'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 3'!

!classDefinition: 'Falso class' category: #'Ejercicio 3' stamp: 'FB 3/18/2024 21:25:38'!
Falso class
	instanceVariableNames: ''!
!Falso class methodsFor: 'no messages' stamp: 'FB 3/18/2024 21:26:11'!
no
	^Verdadero! !
!Verdadero class methodsFor: 'no messages' stamp: 'FB 3/18/2024 21:26:28'!
no
	^Falso! !
!Falso class methodsFor: 'as yet unclassified' stamp: 'FB 3/18/2024 21:27:22'!
y: unBooleano
	^ Falso! !

Falso y: Verdadero!
!Verdadero class methodsFor: 'as yet unclassified' stamp: 'FB 3/18/2024 21:28:10'!
y: unBooleano
	^ unBooleano! !

Verdadero y: Falso!
!Falso class methodsFor: 'as yet unclassified' stamp: 'FB 3/18/2024 21:32:01'!
o: unBooleano
	^ unBooleano! !
!Verdadero class methodsFor: 'as yet unclassified' stamp: 'FB 3/18/2024 21:32:38'!
o: unBooleano
	^ Verdadero! !
!Falso class methodsFor: 'as yet unclassified' stamp: 'FB 3/18/2024 21:40:22'!
siVerdadero: unaAccionARealizarUIgnorar
! !
!Falso class methodsFor: 'as yet unclassified' stamp: 'FB 3/18/2024 21:42:38'!
siFalso: unaAccionARealizarUIgnorar

	unaAccionARealizarUIgnorar value! !
!Verdadero class methodsFor: 'as yet unclassified' stamp: 'FB 3/18/2024 21:45:48'!
siVerdadero: unaAccionARealizarUIgnorar
	
	unaAccionARealizarUIgnorar  value! !
!Verdadero class methodsFor: 'as yet unclassified' stamp: 'FB 3/18/2024 21:46:57'!
siFalso: unaAccionARealizarUIgnorar

	! !

----End fileIn of /home/felipe/Descargas/Numeros Naturales Tests.st----!

ObjectBuilder create: #Tests asChildOf: DenotativeObject collaboratorNames: '' in: 'Ejercicio 3'!

!classDefinition: #Tests category: #'Ejercicio 3' stamp: 'FB 3/18/2024 21:54:42'!
DenotativeObject subclass: #Tests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 3'!

!classDefinition: 'Tests class' category: #'Ejercicio 3' stamp: 'FB 3/18/2024 21:54:42'!
Tests class
	instanceVariableNames: ''!

----SNAPSHOT----(18 March 2024 21:58:00) CuisUniversity-6169.image priorSource: 6245038!
!Bill class methodsFor: '--** private fileout/in **--' stamp: 'FB 3/18/2024 21:58:20' overrides: 50513977!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	energia := (SimpleMeasure basicNew instVarAt: 1 put: 25; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'day'; instVarAt: 2 put: 'days'; instVarAt: 3 put: 'NO SIGN'; yourself); yourself).! !

!methodRemoval: Bill class #initializeCollaboratorsFromFile stamp: 'FB 3/18/2024 21:58:20'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	energia := (SimpleMeasure basicNew instVarAt: 1 put: 25; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'day'; instVarAt: 2 put: 'days'; instVarAt: 3 put: 'NO SIGN'; yourself); yourself).!

----STARTUP---- (20 March 2024 16:15:50) as /home/felipe/Escritorio/CUIS/linux64/CuisUniversity-6169.image!


Verdadero y:  Falso.!
!Tests class methodsFor: 'no messages' stamp: 'FB 3/20/2024 16:24:22'!
testYVerdaderoYFalso

	Assert that: Verdadero isEqualTo: Falso description: Falso! !
!Tests class methodsFor: '-- all --' stamp: 'FB 3/20/2024 16:25:12' prior: 50527094!
testYVerdaderoYFalso

	Assert that: (Verdadero y: Falso) isEqualTo: Falso ! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:25:15'!
PASSED!
!Tests class methodsFor: '-- all --' stamp: 'FB 3/20/2024 16:25:59'!
testOVerdaderoYFalso

	Assert that: (Verdadero o: Falso) isEqualTo: Verdadero ! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:26:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:26:03'!
PASSED!
!Tests class methodsFor: '-- all --' stamp: 'FB 3/20/2024 16:26:52' prior: 50527100!
testYVerdaderoYFalso

	Assert that: (Verdadero no) isEqualTo: Falso ! !
!Tests class methodsFor: '-- all --' stamp: 'FB 3/20/2024 16:26:59' prior: 50527120!
testYVerdaderoYFalso

	Assert that: (Verdadero y: Falso) isEqualTo: Falso ! !
!Tests class methodsFor: '-- all --' stamp: 'FB 3/20/2024 16:27:14'!
testNoVerdadero

	Assert that: (Verdadero no) isEqualTo: Falso ! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:27:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:27:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:27:17'!
PASSED!
!Tests class methodsFor: '-- all --' stamp: 'FB 3/20/2024 16:27:52'!
testNoFalso

	Assert that: (Falso no) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:27:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:27:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:27:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:27:55'!
PASSED!
!Tests class methodsFor: '-- all --' stamp: 'FB 3/20/2024 16:28:19'!
testOFalsoYVerdadero

	Assert that: (Falso o: Verdadero) isEqualTo: Verdadero! !
!Tests class methodsFor: '-- all --' stamp: 'FB 3/20/2024 16:28:36'!
testYFalsoYVerdadero

	Assert that: (Falso y: Verdadero) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:28:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:28:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:28:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:28:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:28:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:28:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:32:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:32:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:32:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:32:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:32:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/20/2024 16:32:39'!
PASSED!

----SNAPSHOT----(20 March 2024 16:36:18) CuisUniversity-6169.image priorSource: 6253956!

----STARTUP---- (21 March 2024 20:39:42) as /home/felipe/Escritorio/CUIS/linux64/CuisUniversity-6169.image!

!Tests class methodsFor: '-- all --' stamp: 'FB 3/21/2024 20:43:59'!
testVerdaderoSiVerdadero
	
	|estadoDeEjecucion|
	
	estadoDeEjecucion := #NoSeEjecuto.
	
	Verdadero siVerdadero:[estadoDeEjecucion := #SeEjecuto].
	
	Assert that: estadoDeEjecucion isEqualTo: #SeEjecuto! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:44:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:44:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:44:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:44:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:44:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:44:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:44:30'!
PASSED!
!Verdadero class methodsFor: 'as yet unclassified' stamp: 'FB 3/21/2024 20:45:14'!
testFalsoSiVerdadero
	
	|estadoDeEjecucion|
	
	estadoDeEjecucion := #NoSeEjecuto.
	
	Falso siVerdadero:[estadoDeEjecucion := #SeEjecuto].
	
	Assert that: estadoDeEjecucion isEqualTo: #NoSeEjecuto! !

!methodRemoval: Verdadero class #testFalsoSiVerdadero stamp: 'FB 3/21/2024 20:45:36'!
testFalsoSiVerdadero
	
	|estadoDeEjecucion|
	
	estadoDeEjecucion := #NoSeEjecuto.
	
	Falso siVerdadero:[estadoDeEjecucion := #SeEjecuto].
	
	Assert that: estadoDeEjecucion isEqualTo: #NoSeEjecuto!
!Tests class methodsFor: '-- all --' stamp: 'FB 3/21/2024 20:46:03'!
testFalsoSiVerdadero
	
	|estadoDeEjecucion|
	
	estadoDeEjecucion := #NoSeEjecuto.
	
	Falso siVerdadero:[estadoDeEjecucion := #SeEjecuto].
	
	Assert that: estadoDeEjecucion isEqualTo: #NoSeEjecuto! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:46:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:46:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:46:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:46:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:46:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:46:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:46:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'FB 3/21/2024 20:46:08'!
PASSED!

----SNAPSHOT----(21 March 2024 20:47:07) CuisUniversity-6169.image priorSource: 6257748!

ObjectBuilder create: #i
	collaboratorNames: ''
	in: 'Ejercicio 4'
	!

!classDefinition: #i category: #'Ejercicio 4' stamp: 'FB 3/21/2024 20:50:46'!
DenotativeObject subclass: #i
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'i class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 20:50:46'!
i class
	instanceVariableNames: ''!

ObjectBuilder create: #II
	collaboratorNames: ''
	in: 'Ejercicio 4'
	!

!classDefinition: #II category: #'Ejercicio 4' stamp: 'FB 3/21/2024 20:51:07'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'II class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 20:51:07'!
II class
	instanceVariableNames: ''!

ObjectBuilder create: #I
	collaboratorNames: ''
	in: 'Ejercicio 4'
	!

!classDefinition: #I category: #'Ejercicio 4' stamp: 'FB 3/21/2024 20:51:34'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'I class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 20:51:34'!
I class
	instanceVariableNames: ''!

!classRemoval: #i stamp: 'FB 3/21/2024 20:52:05'!
DenotativeObject subclass: #i
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

self error: 'asd'!
!I class methodsFor: 'no messages' stamp: 'FB 3/21/2024 20:54:30'!
m1

	self error: 'asd'! !

I m1!

II createChildNamed: 'III'!

!classDefinition: #III category: #'Ejercicio 4' stamp: 'FB 3/21/2024 20:59:54'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 20:59:54'!
III class
	instanceVariableNames: ''!

II name!

II name , 'I'!

II name !

'I'!

1!

1!

III createChildNamed: self , 'I'!

III createChildNamed: self , 'I'!

!methodRemoval: I class #m1 stamp: 'FB 3/21/2024 21:13:30'!
m1

	self error: 'asd'!
!I class methodsFor: 'no messages' stamp: 'FB 3/21/2024 21:13:43'!
next
	^II! !

I next!
!II class methodsFor: 'no messages' stamp: 'FB 3/21/2024 21:14:10'!
prev
	^I! !
!II class methodsFor: '-- all --' stamp: 'FB 3/21/2024 21:14:25'!
previous
	^I! !

!methodRemoval: II class #prev stamp: 'FB 3/21/2024 21:14:28'!
prev
	^I!

II previous!

III createChildNamed: self name , 'I'!

!classDefinition: #nilI category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:15:52'!
III subclass: #nilI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'nilI class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:15:52'!
nilI class
	instanceVariableNames: ''!

!classRemoval: #nilI stamp: 'FB 3/21/2024 21:16:13'!
III subclass: #nilI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!
!II class methodsFor: '-- all --' stamp: 'FB 3/21/2024 21:17:51'!
next
	II createChildNamed: self name, 'I' ! !

II next!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:18:00'!
III class
	instanceVariableNames: ''!

!classDefinition: #III category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:18:00'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:18:00'!
III class
	instanceVariableNames: ''!
!II class methodsFor: '-- all --' stamp: 'FB 3/21/2024 21:18:10' prior: 50527389!
next
	^ II createChildNamed: self name , 'I' ! !

II next!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:18:14'!
III class
	instanceVariableNames: ''!

!classDefinition: #III category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:18:14'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:18:14'!
III class
	instanceVariableNames: ''!

III next!

!classDefinition: #IIII category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:18:53'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIII class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:18:53'!
IIII class
	instanceVariableNames: ''!

IIII next !

!classDefinition: #IIIII category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:19:08'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIIII class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:19:08'!
IIIII class
	instanceVariableNames: ''!

IIIII next !

!classDefinition: #IIIIII category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:19:57'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIIIII class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:19:57'!
IIIIII class
	instanceVariableNames: ''!

III previous!

!classRemoval: #NumerosNaturalesTest stamp: 'FB 3/21/2024 21:29:57'!
DenotativeObject subclass: #NumerosNaturalesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales Tests'!

!classRemoval: #IIII stamp: 'FB 3/21/2024 21:30:02'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classRemoval: #IIIII stamp: 'FB 3/21/2024 21:30:05'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classRemoval: #IIIIII stamp: 'FB 3/21/2024 21:30:07'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!
!II class methodsFor: '-- all --' stamp: 'FB 3/21/2024 21:30:14' prior: 50527408!
next
	^ self createChildNamed: self name , 'I' ! !
!III class methodsFor: 'no messages' stamp: 'FB 3/21/2024 21:34:49' overrides: 50527366!
previous

	self parent name ! !

!classRemoval: #III stamp: 'FB 3/21/2024 21:39:01'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

II
	collaboratorNames: 'padre'
	in: 'Ejercicio 4'!

!classDefinition: 'II class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:39:06'!
II class
	instanceVariableNames: 'padre'!

!classDefinition: #II category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:39:06'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'II class' category: #'Ejercicio 4' stamp: 'FB 3/21/2024 21:39:06'!
II class
	instanceVariableNames: 'padre'!
!II class methodsFor: '-- all --' stamp: 'FB 3/21/2024 21:42:32'!
establecerPadre: numeroPadre
	padre := numeroPadre! !

----SNAPSHOT----(21 March 2024 21:50:16) CuisUniversity-6169.image priorSource: 6260534!

----STARTUP---- (24 March 2024 17:26:58) as /home/felipe/Escritorio/CUIS/linux64/CuisUniversity-6169.image!


!methodRemoval: II class #establecerPadre: stamp: 'FB 3/24/2024 17:31:28'!
establecerPadre: numeroPadre
	padre := numeroPadre!
!I class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:33:04' prior: 50527360!
next
	! !

!classRemoval: #II stamp: 'FB 3/24/2024 17:33:08'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

ObjectBuilder create: #II
	collaboratorNames: 'prev'
	in: 'Ejercicio 4'
	
	!

!classDefinition: #II category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:33:21'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'II class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:33:21'!
II class
	instanceVariableNames: 'prev'!
!II class methodsFor: 'no messages' stamp: 'FB 3/24/2024 17:35:10'!
next
	|nuevo|
	nuevo := self createChildNamed: self name , 'I'
	nuevo.prev := self
	^nuevo
	! !

II next!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:38:41'!
previous
	^prev! !

II previous!

 I!
!I class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:39:04' prior: 50527528!
next
	^ II! !
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:41:12'!
establecerPrevio: unNumero
	prev := unNumero
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:41:43' prior: 50527550!
next
	|nuevo|
	nuevo := self createChildNamed: self name , 'I'
	nuevo establecerPrevio self
	^nuevo
	! !

II next!

Bill comer:3!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:43:11' prior: 50527569!
next
	
	| nuevo |
	nuevo := self createChildNamed: self name , 'I'
	^nuevo
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:43:18' prior: 50527576!
next
	| nuevo |
	nuevo := self createChildNamed: self name , 'I'
	^nuevo
	! !

II next!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:45:12' prior: 50527582!
next
	|nuevo|
	nuevo := (self createChildNamed: self name , 'I')
	nuevo establecerPrevio:self
	^nuevo
	! !

II next!

!classDefinition: #III category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:45:17'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:45:17'!
III class
	instanceVariableNames: ''!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:45:47' prior: 50527588!
next
	|nuevo|
	nuevo := (self createChildNamed: self name , 'I')
	^nuevo
	! !

II next!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:45:51'!
III class
	instanceVariableNames: ''!

!classDefinition: #III category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:45:51'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:45:51'!
III class
	instanceVariableNames: ''!

!classRemoval: #III stamp: 'FB 3/24/2024 17:46:25'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:46:41' prior: 50527605!
next

	self createChildNamed: self name , 'I'
	! !

II next!

!classDefinition: #III category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:46:44'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:46:44'!
III class
	instanceVariableNames: ''!

!classRemoval: #III stamp: 'FB 3/24/2024 17:46:50'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:47:38' prior: 50527630!
next
	| nuevo |
	nuevo := self createChildNamed: self name , 'I'
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:47:47' prior: 50527651!
next
	| nuevo |
	nuevo := self createChildNamed: self name , 'I'
	^nuevo! !

II next !
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:51:28' prior: 50527657!
next
	| nuevo |
	
	nuevo := self createChildNamed: self name , 'I'.
	nuevo establecerPrevio: self
	^nuevo! !
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:51:34' prior: 50527663!
next
	| nuevo |
	nuevo := self createChildNamed: self name , 'I'.
	nuevo establecerPrevio: self
	^nuevo! !

II next !

!classDefinition: #III category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:51:36'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:51:36'!
III class
	instanceVariableNames: ''!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:52:04' prior: 50527670!
next
	| nuevo |
	nuevo := self createChildNamed: self name , 'I'.
	nuevo establecerPrevio: self.
	^nuevo! !

!classRemoval: #III stamp: 'FB 3/24/2024 17:52:11'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

II next !

!classDefinition: #III category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:52:13'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:52:13'!
III class
	instanceVariableNames: ''!

  III next !

!classDefinition: #IIII category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:52:31'!
III subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIII class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 17:52:31'!
IIII class
	instanceVariableNames: ''!

  III prev!

III previous!

IIII previous!

----SNAPSHOT----(24 March 2024 17:54:04) CuisUniversity-6169.image priorSource: 6267733!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 17:54:42'!
+: anAdder
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 18:03:04'!
suma: anAdder
	self createChildNamed: self name , anAdder name.! !

!methodRemoval: II class #'+:' stamp: 'FB 3/24/2024 18:03:09'!
+: anAdder
	!

II suma: IIII!

!classDefinition: #IIIIII category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:03:24'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIIIII class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:03:24'!
IIIIII class
	instanceVariableNames: ''!

!classRemoval: #IIII stamp: 'FB 3/24/2024 18:03:40'!
III subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classRemoval: #IIIIII stamp: 'FB 3/24/2024 18:03:45'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 18:03:51' prior: 50527687!
next
	| nuevo |
	nuevo := self createChildNamed: II name , 'I'.
	nuevo establecerPrevio: self.
	^nuevo! !

II next!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:03:59'!
III class
	instanceVariableNames: ''!

!classDefinition: #III category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:03:59'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:03:59'!
III class
	instanceVariableNames: ''!

III next !

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:04:04'!
III class
	instanceVariableNames: ''!

III next!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:04:12'!
III class
	instanceVariableNames: ''!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 18:04:21' prior: 50527757!
next
	| nuevo |
	nuevo := II createChildNamed: II name , 'I'.
	nuevo establecerPrevio: self.
	^nuevo! !

III next!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:04:22'!
III class
	instanceVariableNames: ''!

!classDefinition: #III category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:04:22'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:04:22'!
III class
	instanceVariableNames: ''!

 III .!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 18:04:33' prior: 50527787!
next
	| nuevo |
	nuevo := self createChildNamed: II name , 'I'.
	nuevo establecerPrevio: self.
	^nuevo! !
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 18:04:53' prior: 50527808!
next
	| nuevo |
	nuevo := II createChildNamed: self name , 'I'.
	nuevo establecerPrevio: self.
	^nuevo! !

III next !

!classDefinition: #IIII category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:04:56'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIII class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:04:56'!
IIII class
	instanceVariableNames: ''!

IIII next!

!classDefinition: #IIIII category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:05:04'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIIII class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:05:04'!
IIIII class
	instanceVariableNames: ''!

II suma: IIII!

!classDefinition: #IIIIII category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:05:13'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIIIII class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:05:13'!
IIIIII class
	instanceVariableNames: ''!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/24/2024 18:05:25' prior: 50527727!
suma: anAdder
	^ self createChildNamed: self name , anAdder name.! !

II suma: IIII!

!classDefinition: 'IIIIII class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:05:30'!
IIIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIIII category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:05:30'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIIIII class' category: #'Ejercicio 4' stamp: 'FB 3/24/2024 18:05:30'!
IIIIII class
	instanceVariableNames: ''!

----SNAPSHOT----(24 March 2024 18:06:20) CuisUniversity-6169.image priorSource: 6274247!

----SNAPSHOT----(24 March 2024 18:08:55) CuisUniversity-6169.image priorSource: 6279144!

----STARTUP---- (25 March 2024 10:59:41) as /home/felipe/Escritorio/CUIS/linux64/CuisUniversity-6169.image!

!I class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:02:08'!
* aMultiplicand
	^ aMultiplicand! !
!I class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:02:16'!
+ anAdder
	^ anAdder next! !
!I class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:02:28'!
- aSustrahend
	self error: 'No permitido'! !
!I class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:02:36'!
/ aDividend
	self error: 'No permitido'! !
!I class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:03:12'!
previous
	self error: 'No permitido'! !
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:03:58'!
+ anAdder
	^ self previous + anAdder next! !

----SNAPSHOT----(25 March 2024 11:04:13) CuisUniversity-6169.image priorSource: 6279234!

II + IIII!

!classDefinition: 'IIIII class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:04:43'!
IIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIII category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:04:43'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIIII class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:04:43'!
IIIII class
	instanceVariableNames: ''!

!classDefinition: 'IIIIII class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:04:43'!
IIIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIIII category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:04:43'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIIIII class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:04:43'!
IIIIII class
	instanceVariableNames: ''!

!methodRemoval: II class #suma: stamp: 'FB 3/25/2024 11:04:53'!
suma: anAdder
	^ self createChildNamed: self name , anAdder name.!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:06:05'!
- aSustrahend
	aSustrahend = I 
		ifTrue: [^self previous] 
		ifFalse: [^ self previous - aSustrahend previous]! !

IIII - II!

!methodRemoval: II class #- stamp: 'FB 3/25/2024 11:06:57'!
- aSustrahend
	aSustrahend = I 
		ifTrue: [^self previous] 
		ifFalse: [^ self previous - aSustrahend previous]!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:07:20'!
* aMultiplicand
	| suma temp |
	suma := self. 
	temp := aMultiplicand.
	[temp = I] 
		whileFalse: [suma := suma + self . temp := temp previous]. 
	^ suma! !

----SNAPSHOT----(25 March 2024 11:07:52) CuisUniversity-6169.image priorSource: 6280204!

II * III!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
III class
	instanceVariableNames: ''!

!classDefinition: #III category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
III class
	instanceVariableNames: ''!

!classDefinition: 'IIII class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
IIII class
	instanceVariableNames: ''!

!classDefinition: #IIII category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIII class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
IIII class
	instanceVariableNames: ''!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
III class
	instanceVariableNames: ''!

!classDefinition: #III category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'III class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
III class
	instanceVariableNames: ''!

!classDefinition: 'IIII class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
IIII class
	instanceVariableNames: ''!

!classDefinition: #IIII category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIII class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
IIII class
	instanceVariableNames: ''!

!classDefinition: 'IIIII class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
IIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIII category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIIII class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
IIIII class
	instanceVariableNames: ''!

!classDefinition: 'IIIIII class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
IIIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIIII category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classDefinition: 'IIIIII class' category: #'Ejercicio 4' stamp: 'FB 3/25/2024 11:07:57'!
IIIIII class
	instanceVariableNames: ''!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:12:45'!
- anSustrahend
	anSustrahend = I
		ifTrue: [^self previous]
		ifFalse:[^self previous - anSustrahend previous]! !

III - II!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:18:05' prior: 50528053!
- anSustrahend
	[anSustrahend = I]
		ifTrue: [^self previous]
		ifFalse:[^self previous - anSustrahend previous]! !

III - II!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:18:24' prior: 50528060!
- anSustrahend
	anSustrahend = I
		ifTrue: [^self previous]
		ifFalse:[^self previous - anSustrahend previous]! !

III - II!

----SNAPSHOT----(25 March 2024 11:20:45) CuisUniversity-6169.image priorSource: 6282012!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:25:26'!
/ dividend
	| divisor dividendo cociente|
	divisor := self.
	dividendo := dividend.
	cociente := I.
	[dividend = I]
		whileFalse: [ divisor := divisor - dividendo. cociente := cociente next]
	^cociente! !

----SNAPSHOT----(25 March 2024 11:25:30) CuisUniversity-6169.image priorSource: 6285532!
!II class methodsFor: '--** private fileout/in **--' stamp: 'FB 3/25/2024 11:25:36' overrides: 50513977!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	prev := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'FB 3/25/2024 11:25:36' overrides: 50528090!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	prev := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'FB 3/25/2024 11:25:36' overrides: 50528090!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	prev := III.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'FB 3/25/2024 11:25:36' overrides: 50528090!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	prev := IIII.! !
!IIIIII class methodsFor: '--** private fileout/in **--' stamp: 'FB 3/25/2024 11:25:36' overrides: 50528090!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	prev := IIIII.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'FB 3/25/2024 11:25:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	prev := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'FB 3/25/2024 11:25:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	prev := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'FB 3/25/2024 11:25:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	prev := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'FB 3/25/2024 11:25:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	prev := IIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'FB 3/25/2024 11:25:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	prev := IIIII.!

III / III!
!II class methodsFor: 'as yet unclassified' stamp: 'FB 3/25/2024 11:26:01' prior: 50528077!
/ dividend
	| divisor dividendo cociente|
	divisor := self.
	dividendo := dividend.
	cociente := I.
	[dividend = I]
		whileFalse: [ divisor := divisor - dividendo. cociente := cociente next].
	^cociente! !

III / III!

----STARTUP---- (5 April 2024 10:54:10) as /home/felipe/Documentos/CUIS/linux64/CuisUniversity-6169.image!

!Bill class methodsFor: '--** private fileout/in **--' stamp: 'Fb 4/5/2024 10:54:34' overrides: 50513977!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	energia := (SimpleMeasure basicNew instVarAt: 1 put: 2575e-2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'day'; instVarAt: 2 put: 'days'; instVarAt: 3 put: 'NO SIGN'; yourself); yourself).! !

!methodRemoval: Bill class #initializeCollaboratorsFromFile stamp: 'Fb 4/5/2024 10:54:34'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	energia := (SimpleMeasure basicNew instVarAt: 1 put: 2575e-2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'day'; instVarAt: 2 put: 'days'; instVarAt: 3 put: 'NO SIGN'; yourself); yourself).!

----STARTUP---- (8 April 2024 10:11:31) as /home/felipe/Documentos/CUIS/linux64/CuisUniversity-6169.image!


!classRemoval: #IIIIII stamp: 'fb 4/8/2024 10:27:54'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classRemoval: #IIIII stamp: 'fb 4/8/2024 10:27:55'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classRemoval: #IIII stamp: 'fb 4/8/2024 10:27:55'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classRemoval: #III stamp: 'fb 4/8/2024 10:27:55'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classRemoval: #II stamp: 'fb 4/8/2024 10:27:55'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

!classRemoval: #I stamp: 'fb 4/8/2024 10:27:56'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio 4'!

----End fileIn of /home/felipe/Documentos/CUIS/linux64/Ejercicio 4.st----!

III + II!

!classDefinition: 'III class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:15'!
III class
	instanceVariableNames: ''!

!classDefinition: #III category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:15'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classDefinition: 'III class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:15'!
III class
	instanceVariableNames: ''!

!classDefinition: 'IV class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:15'!
IV class
	instanceVariableNames: ''!

!classDefinition: #IV category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:15'!
II subclass: #IV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classDefinition: 'IV class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:15'!
IV class
	instanceVariableNames: ''!

!classDefinition: 'V class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:15'!
V class
	instanceVariableNames: ''!

!classDefinition: #V category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:15'!
II subclass: #V
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classDefinition: 'V class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:15'!
V class
	instanceVariableNames: ''!

----SNAPSHOT----(8 April 2024 10:29:32) CuisUniversity-6169.image priorSource: 6285932!

!classDefinition: 'III class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:52'!
III class
	instanceVariableNames: ''!

!classDefinition: #III category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:52'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classDefinition: 'III class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:52'!
III class
	instanceVariableNames: ''!

!classDefinition: 'IV class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:52'!
IV class
	instanceVariableNames: ''!

!classDefinition: #IV category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:52'!
II subclass: #IV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classDefinition: 'IV class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:52'!
IV class
	instanceVariableNames: ''!

!classDefinition: 'V class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:52'!
V class
	instanceVariableNames: ''!

!classDefinition: #V category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:52'!
II subclass: #V
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classDefinition: 'V class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:29:52'!
V class
	instanceVariableNames: ''!

ObjectBuilder create: #objetoEj02
	collaboratorNames: 'aVar'
	in: 'Ejercicio4'
	!

!classDefinition: #objetoEj02 category: #Ejercicio4 stamp: 'fb 4/8/2024 10:31:27'!
DenotativeObject subclass: #objetoEj02
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classDefinition: 'objetoEj02 class' category: #Ejercicio4 stamp: 'fb 4/8/2024 10:31:27'!
objetoEj02 class
	instanceVariableNames: 'aVar'!

!classRemoval: #objetoEj02 stamp: 'fb 4/8/2024 10:31:34'!
DenotativeObject subclass: #objetoEj02
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

ObjectBuilder create: #Item2
	collaboratorNames: 'aVar'
	in: 'Ejercicio0Seccion2'
	!

!classDefinition: #Item2 category: #Ejercicio0Seccion2 stamp: 'fb 4/8/2024 10:32:32'!
DenotativeObject subclass: #Item2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio0Seccion2'!

!classDefinition: 'Item2 class' category: #Ejercicio0Seccion2 stamp: 'fb 4/8/2024 10:32:32'!
Item2 class
	instanceVariableNames: 'aVar'!
!Item2 class methodsFor: 'no messages' stamp: 'fb 4/8/2024 10:33:48'!
m1
	| b |
	
	b := 42.
	aVar := 1.
	
	^ self m2: b! !

Item2 m1!
!Item2 class methodsFor: 'methods' stamp: 'fb 4/8/2024 10:34:22'!
m2: b 
	self shouldBeImplemented.! !
!Item2 class methodsFor: 'methods' stamp: 'fb 4/8/2024 10:35:14' prior: 50528619!
m2: anotherValue 
	| b |
	
	b := 24.
	aVar < 3 ifTrue: [ aVar := aVar + anotherValue ].
	
	^ aVar + b! !

Item2 m1!

ObjectBuilder create: #Colecciones
	collaboratorNames: ''
	in: 'Seccion 2 Ejercicio 1'
	!

!classDefinition: #Colecciones category: #'Seccion 2 Ejercicio 1' stamp: 'fb 4/8/2024 10:40:12'!
DenotativeObject subclass: #Colecciones
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Seccion 2 Ejercicio 1'!

!classDefinition: 'Colecciones class' category: #'Seccion 2 Ejercicio 1' stamp: 'fb 4/8/2024 10:40:12'!
Colecciones class
	instanceVariableNames: ''!
!Colecciones class methodsFor: 'no messages' stamp: 'fb 4/8/2024 10:41:34'!
createArray
	|x|
	
	x := #(5 4 3 2).
	
	^ x! !

Colecciones createArray !

Colecciones createArray !

 #(5 4 3 2) .!

#(5 4 3 2)!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:47:00' prior: 50528645!
createArray
	|x|
	
	x := #(5 4 3 2).
	
	x at: 1 put: 42
	
	^ x! !

Colecciones createArray !

Colecciones createArray !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:47:15' prior: 50528652!
createArray
	|x|
	
	x := #(5 4 3 2).
	
	x at: 1 put: 42
	
	^x! !

Colecciones createArray!

Colecciones createArray!

 Colecciones .!

Colecciones .!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:48:00' prior: 50528659!
createArray
	|x|
	
	x := #(5 4 3 2).
	
	x at: 1 put: 42.
	
	^x! !

Colecciones createArray !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:48:25' prior: 50528667!
createArray
	|x|
	
	x := #(5 4 3 2).
	
	"indexa desde 1 los arrays"
	x at: 1 put: 42.
	
	^x! !

Colecciones createArray  !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:48:51' prior: 50528673!
createArray
	|x|
	
	x := #(5 4 3 2).
	
	"indexa desde 1 los arrays"
	x at: 5 put: 42.
	
	^x! !

Colecciones createArray !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:49:27' prior: 50528680!
createArray
	|x|
	
	x := #(5 4 3 2).
	
	"indexa desde 1 los arrays"
	x at: 1 put: 42.
	"al querer ponerlo en el index 5 nos salimos de rango"
	
	^x! !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:50:43'!
createOrderedCollection
	
	|x|
	
	x := OrderedCollection with: 4 with: 3 with: 2 with: 1.
	
	x with: 42 with: 2.
	
	^x! !

Colecciones createOrderedCollection !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:51:06' prior: 50528695!
createOrderedCollection
	
	|x|
	
	x := OrderedCollection with: 4 with: 3 with: 2 with: 1.
	
	
	
	^x! !

Colecciones createOrderedCollection !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:51:50' prior: 50528703!
createOrderedCollection
	
	|x|
	
	x := OrderedCollection with: 4 with: 3 with: 2 with: 1.
	
	x add: 42.
	
	^x! !

Colecciones createOrderedCollection !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:51:59' prior: 50528711!
createOrderedCollection
	
	|x|
	
	x := OrderedCollection with: 4 with: 3 with: 2 with: 1.
	
	x add: 42.
	x add: 2.
	
	^x! !

Colecciones createOrderedCollection !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:53:01'!
createSet

	|x|
	
	x := Set with: 4 with: 3 with: 2 with: 1.
	
	x add: 42.
	x add: 2.
	
	^x! !

Colecciones createSet !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:53:54'!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.! !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:55:46' prior: 50528734!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	^ x keys! !

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:56:22' prior: 50528741!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	x keys
	
	x values
	^ x values! !

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:56:36' prior: 50528750!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	x keys.
	
	x values.
	^ x values! !

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:57:05' prior: 50528759!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	^ x at:#a! !

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:57:15' prior: 50528768!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	^ x at:#z! !

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:57:52' prior: 50528778!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	^ x at: #z ifPresent: 24 ! !

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 10:58:10' prior: 50528788!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	
	"si existe el valor devuelve 24, si no nil"
	^ x at: #z ifPresent: 24 ! !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 11:00:24' prior: 50528799!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	
	x add: #z->'boca'.
	"si existe el valor devuelve 24, si no nil"
	^ x at: #z ifPresent: 24 ! !

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 11:00:57' prior: 50528810!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	
	x add: #z->'boca'.
	"si existe el valor devuelve 24, si no nil"
	^ x at: #z ifPresent: [^24] ! !

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 11:01:20' prior: 50528823!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	
	x add: #z->'boca'.
	"si existe el valor devuelve 24, si no nil"
	^ x at: #z ifPresent: [^24] ! !

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 11:03:12' prior: 50528836!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	
	x add: #z->'boca'.
	"si existe el valor devuelve 24, si no nil"
	^ x at: #z ifPresent: [^24.] ! !

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 11:03:22' prior: 50528849!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	
	x add: #z->'boca'.
	"si existe el valor devuelve 24, si no nil"
	^ x at: #z ifPresent: [^24]. ! !

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 11:04:08' prior: 50528862!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	
	x add: #z->'boca'.
	"si existe el valor devuelve 24, si no nil"
	^ x at: #z ifPresent: [^24.]! !
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 11:04:15' prior: 50528875!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	
	x add: #z->'boca'.
	"si existe el valor devuelve 24, si no nil"
	^ x at: #z ifPresent: [^24].! !

Colecciones createDictionary!

Colecciones createDictionary!

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 11:05:37' prior: 50528887!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	
	x add: #z->'boca'.
	"si existe el valor devuelve 24, si no nil"
	^ x at: #z ifPresent: [:z |^24].! !

Colecciones createDictionary!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 11:06:49' prior: 50528902!
createDictionary
	|x|
	
	x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	
	"listar keys"
	x keys.
	"listar values"
	x values.
	
	x add: #z->'boca'.
	"si existe el valor devuelve 24, si no nil"
	"el :z es porque el bloque esta siendo llamado con un parametro, y si no se lo define dentro de el
	 tira error. Los parametros de los bloques se definen con :aParameter a la izquierda de la | en el bloque."
	^ x at: #z ifPresent: [:z |^24].! !

----SNAPSHOT----(8 April 2024 11:14:15) CuisUniversity-6169.image priorSource: 6300367!
!Item2 class methodsFor: '--** private fileout/in **--' stamp: 'fb 4/8/2024 11:14:19' overrides: 50513977!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	aVar := 43.! !

!methodRemoval: Item2 class #initializeCollaboratorsFromFile stamp: 'fb 4/8/2024 11:14:19'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	aVar := 43.!
!Colecciones class methodsFor: '-- all --' stamp: 'fb 4/8/2024 11:16:32'!
getOddsFromArray

	| elements index odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	index := 1.
	
	[index <= elements size]
	whileTrue: [
		((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
		index := index +1.
		].
	^odds! !

Colecciones getOddsFromArray !

| elements index odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	index := 1.
	
	[index <= elements size]
	whileTrue: [
		((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
		index := index +1.
		].
	^odds!

	elements:= #(1 2 5 6 9).
!

| elements index odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	index := 1.
	
	[index <= elements size]
	whileTrue: [
		((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
		index := index +1.
		].
	^odds!

| elements index odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	index := 1.
	
	[index <= elements size]
	whileTrue: [
		((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
		index := index +1.
		].
	^odds!

| elements index odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	index := 1.
	
	[index <= elements size]
	whileTrue: [
		((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
		index := index +1.
		].
	^odds!

| elements index odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	index := 1.
	
	[index <= elements size]
	whileTrue: [
		((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
		index := index +1.
		].
	^odds!

| elements index odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	index := 1.
	
	[index <= elements size]
	whileTrue: [
		((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
		index := index +1.
		].
	^odds!
!Item2 class methodsFor: '--** private fileout/in **--' stamp: 'fb 4/8/2024 11:27:11' overrides: 50513977!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	aVar := 43.! !

!methodRemoval: Item2 class #initializeCollaboratorsFromFile stamp: 'fb 4/8/2024 11:27:11'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	aVar := 43.!

----SNAPSHOT----(8 April 2024 11:27:25) CuisUniversity-6169.image priorSource: 6313034!

----STARTUP---- (8 April 2024 17:40:03) as /home/felipe/Documentos/CUIS/linux64/CuisUniversity-6169.image!


ifFalse!

ifFalse!

----STARTUP---- (8 April 2024 20:42:13) as /home/felipe/Documentos/CUIS/linux64/CuisUniversity-6169.image!


----End fileIn of /home/felipe/Documentos/CUIS/linux64/Ejercicio 4.st----!

----End fileIn of /home/felipe/Documentos/CUIS/linux64/CodigoRepetido-Ejercicio.st----!

!classRemoval: #VIII stamp: 'fb 4/8/2024 20:54:06'!
II subclass: #VIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classRemoval: #VII stamp: 'fb 4/8/2024 20:54:06'!
II subclass: #VII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classRemoval: #VI stamp: 'fb 4/8/2024 20:54:06'!
II subclass: #VI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classRemoval: #V stamp: 'fb 4/8/2024 20:54:07'!
II subclass: #V
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classRemoval: #IV stamp: 'fb 4/8/2024 20:54:07'!
II subclass: #IV
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classRemoval: #III stamp: 'fb 4/8/2024 20:54:07'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classRemoval: #II stamp: 'fb 4/8/2024 20:54:07'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!

!classRemoval: #I stamp: 'fb 4/8/2024 20:54:08'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio4'!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:18:13'!
doing:anAction in:aCustomerBook shouldNotTakeMoreThan: numberOfMilliseconds 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aCustomerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (numberOfMilliseconds * millisecond)
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/8/2024 21:18:28'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/8/2024 21:18:28'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:18:28'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/8/2024 21:18:28'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:18:28'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:18:28'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/8/2024 21:18:28'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/8/2024 21:18:28'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:19:56' prior: 50529737!
doing:anAction in:aCustomerBook shouldNotTakeMoreThan: numberOfMilliseconds 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (numberOfMilliseconds * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:20:45' prior: 50529451!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	self doing:[customerBook addCustomerNamed: 'John Lennon'.] shouldNotTakeMoreThan: 50! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:21:22'!
doing:anAction shouldNotTakeMoreThan: numberOfMilliseconds 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (numberOfMilliseconds * millisecond)
	
! !

!methodRemoval: CustomerBookTest #doing:in:shouldNotTakeMoreThan: stamp: 'fb 4/8/2024 21:21:24'!
doing:anAction in:aCustomerBook shouldNotTakeMoreThan: numberOfMilliseconds 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (numberOfMilliseconds * millisecond)
	
!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/8/2024 21:21:35'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/8/2024 21:21:35'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:21:35'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/8/2024 21:21:35'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:21:35'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:21:35'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/8/2024 21:21:35'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/8/2024 21:21:35'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:22:49' prior: 50529468!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	self doing:[customerBook removeCustomerNamed: 'John Lennon'.] shouldNotTakeMoreThan: 100
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/8/2024 21:23:03'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/8/2024 21:23:03'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:23:03'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/8/2024 21:23:03'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:23:03'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:23:03'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/8/2024 21:23:03'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/8/2024 21:23:03'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/8/2024 21:23:03'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:23:17' prior: 50529872!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	self doing:[customerBook removeCustomerNamed: 'Paul McCartney'.] shouldNotTakeMoreThan: 100
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/8/2024 21:23:29'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/8/2024 21:23:29'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:23:29'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/8/2024 21:23:29'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:23:29'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:23:29'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/8/2024 21:23:29'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/8/2024 21:23:29'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:38:39'!
canNotDo: anAction with: aCodeBlock

	[ anAction.
	self fail ]
		on: NotFound 
		do: aCodeBlock! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:40:08' prior: 50529488!
test03CanNotAddACustomerWithEmptyName 

	| customerBook anAction aCodeBlock |
			
	customerBook := CustomerBook new.
	
	anAction := 	[ customerBook addCustomerNamed: ''.].
	aCodeBlock := [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ].
	
	
	self canNotDo: anAction with: aCodeBlock
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/8/2024 21:40:12'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/8/2024 21:40:12'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:40:12'!
FAILURE!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/8/2024 21:40:12'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:40:12'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:40:12'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/8/2024 21:40:12'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/8/2024 21:40:12'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:40:12'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:40:50' prior: 50529960!
canNotDo: anAction with: aCodeBlock

	[ anAction.
	self fail ]
		on: Error 
		do: aCodeBlock! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/8/2024 21:40:53'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/8/2024 21:40:53'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:40:53'!
FAILURE!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/8/2024 21:40:53'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:40:53'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:40:53'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/8/2024 21:40:53'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/8/2024 21:40:53'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:40:53'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:42:04' prior: 50529966!
test03CanNotAddACustomerWithEmptyName 

	| customerBook anAction aCodeBlock |
			
	customerBook := CustomerBook new.
	
	anAction := 	[ customerBook addCustomerNamed: ''.].
	aCodeBlock := [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ].
	
	self canNotDo: anAction throws: Error with: aCodeBlock
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:42:16'!
canNotDo: anAction throws: anError with: aCodeBlock

	[ anAction.
	self fail ]
		on: anError 
		do: aCodeBlock! !

!methodRemoval: CustomerBookTest #canNotDo:with: stamp: 'fb 4/8/2024 21:42:19'!
canNotDo: anAction with: aCodeBlock

	[ anAction.
	self fail ]
		on: Error 
		do: aCodeBlock!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/8/2024 21:42:24'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/8/2024 21:42:24'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:42:24'!
FAILURE!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/8/2024 21:42:24'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:42:24'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:42:24'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/8/2024 21:42:24'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/8/2024 21:42:24'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:42:24'!
FAILURE!

!classDefinition: 'CustomerBookTest class' category: #'CodigoRepetido-Ejercicio' stamp: 'fb 4/8/2024 21:42:49'!
CustomerBookTest class
	instanceVariableNames: 'test03CanNotAddACustomerWithEmptyName'!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:44:18' prior: 50530068!
canNotDo: anAction throws: anError with: aCodeBlock

	[ anAction value.
	self fail ]
		on: anError 
		do: aCodeBlock! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/8/2024 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/8/2024 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/8/2024 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/8/2024 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/8/2024 21:44:23'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:47:01' prior: 50529500!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon anAction aCodeBlock |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	anAction := [customerBook removeCustomerNamed: 'Paul McCartney'.].
	aCodeBlock := [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ].

	self canNotDo: anAction throws: NotFound with: aCodeBlock
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/8/2024 21:47:04'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/8/2024 21:47:04'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:47:04'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/8/2024 21:47:04'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:47:04'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:47:04'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/8/2024 21:47:04'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/8/2024 21:47:04'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:48:09'!
doing: anAction throws: anError thatVerifies: aCodeBlock

	[ anAction value.
	self fail ]
		on: anError 
		do: aCodeBlock! !

!methodRemoval: CustomerBookTest #canNotDo:throws:with: stamp: 'fb 4/8/2024 21:48:11'!
canNotDo: anAction throws: anError with: aCodeBlock

	[ anAction value.
	self fail ]
		on: anError 
		do: aCodeBlock!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:48:28' prior: 50530053!
test03CanNotAddACustomerWithEmptyName 

	| customerBook anAction aCodeBlock |
			
	customerBook := CustomerBook new.
	
	anAction := 	[ customerBook addCustomerNamed: ''.].
	aCodeBlock := [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ].
	
	self doing: anAction throws: Error thatVerifies: aCodeBlock
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:48:41' prior: 50530156!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon anAction aCodeBlock |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	anAction := [customerBook removeCustomerNamed: 'Paul McCartney'.].
	aCodeBlock := [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ].

	self doing: anAction throws: NotFound thatVerifies: aCodeBlock
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:51:30' prior: 50529555!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon anAction aCodeBlock|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	anAction := [customerBook suspendCustomerNamed: 'George Harrison'.].
	aCodeBlock := [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ].
	
	self doing: anAction throws: CantSuspend thatVerifies: aCodeBlock
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:52:33' prior: 50529571!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon anAction aCodeBlock |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	anAction := [customerBook suspendCustomerNamed: johnLennon.].
	aCodeBlock :=  [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ].
	
	

! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/8/2024 21:52:57' prior: 50530270!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon anAction aCodeBlock |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	anAction := [customerBook suspendCustomerNamed: johnLennon.].
	aCodeBlock :=  [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ].
	
	self doing: anAction throws: CantSuspend thatVerifies: aCodeBlock


! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/8/2024 21:52:59'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/8/2024 21:52:59'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/8/2024 21:52:59'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/8/2024 21:52:59'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:52:59'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/8/2024 21:52:59'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/8/2024 21:52:59'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/8/2024 21:52:59'!
PASSED!

----SNAPSHOT----(8 April 2024 21:57:34) CuisUniversity-6169.image priorSource: 6315902!

----STARTUP---- (9 April 2024 10:34:06) as /home/felipe/Documentos/CUIS/linux64/CuisUniversity-6169.image!

!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 10:39:56'!
doing: anAction throws: anError thatAsserts: assert1 and: assert2
	[ anAction value.
	self fail ]
		on: anError 
		do:[ :anErrorParameter | 
	            self assert: assert1.
	            self assert: assert2.]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 10:42:36' prior: 50530217!
test03CanNotAddACustomerWithEmptyName 

    | customerBook assert1 assert2 anAction|

    customerBook := CustomerBook new.

    [ customerBook addCustomerNamed: ''.
    self fail ]
        on: Error 
        do: [ :anError | 
            self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
            self assert: customerBook isEmpty ]

	! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 10:44:39' prior: 50530354!
test03CanNotAddACustomerWithEmptyName 

	| customerBook assert1 assert2 anAction|

	assert1 := [:anError | anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.].

	customerBook := CustomerBook new.

! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 10:49:04' prior: 50530344!
doing: anAction throws: anError thatAsserts: assert1 and: assert2
	[ anAction value.
	self fail ]
		on: anError 
		do:[ :anErrorParameter | 
	            self assert: (assert1 value: anErrorParameter).
	            self assert: (assert2 value: anErrorParameter).]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 10:51:16' prior: 50530369!
test03CanNotAddACustomerWithEmptyName 

	| customerBook assert1 assert2 anAction|
	
	customerBook := CustomerBook new.

	assert1 := [:anError | anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.].
	assert2 := [customerBook isEmpty].

	anAction :=  customerBook addCustomerNamed: ''.
	
	self doing: anAction throws: Error thatAsserts: assert1 and: assert2
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 10:51:35'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 10:51:35'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 10:51:35'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 10:51:35'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 10:51:35'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 10:51:35'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 10:51:35'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 10:51:35'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 10:51:35'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 10:53:29' prior: 50530379!
doing: anAction throws: anError thatAsserts: assert1 and: assert2
	[ anAction value.
	self fail ]
		on: anError 
		do:[ :anErrorParameter | 
	            self assert: (assert1 : anErrorParameter).
	            self assert: (assert2 : anErrorParameter).]! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 10:53:31'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 10:53:31'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 10:53:31'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 10:53:31'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 10:53:31'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 10:53:31'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 10:53:31'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 10:53:31'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 10:53:31'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 10:54:01'!
FAILURE!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 10:54:28'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 10:54:37'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 10:54:37'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 10:54:37'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 10:54:37'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 10:54:37'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 10:54:37'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 10:54:37'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 10:54:37'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 10:54:37'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 10:55:17'!
FAILURE!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 10:55:42'!
PASSED!

----STARTUP---- (9 April 2024 10:56:22) as /home/felipe/Documentos/CUIS/linux64/CuisUniversity-6169.image!


----SNAPSHOT----(9 April 2024 10:57:53) CuisUniversity-6169.image priorSource: 6357973!

----STARTUP---- (9 April 2024 10:58:33) as /home/felipe/Documentos/CUIS/linux64/CuisUniversity-6169.image!

!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:00:08'!
doing: anAction throws: anError thatAsserts: assert1 and: assert2

	[ anAction value.
	self fail ]
		on: anError 
		do:  [ :anErrorParameter | 
            			self assert: assert1.
           			self assert: assert2. ]
		 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:02:01' prior: 50530538!
doing: anAction throws: anError thatAsserts: assert1 and: assert2

	[ anAction value.
	self fail ]
		on: anError 
		do:  [ :anErrorParameter | 
            			self assert: assert1 : anErrorParameter.
           			self assert: assert2 : anErrorParameter. ]
		 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:05:23' prior: 50530548!
doing: anAction throws: anError thatAsserts: assert1 and: assert2

	[ anAction value.
	self fail ]
		on: anError 
		do:  [ :anErrorParameter | 
            			self assert: (assert1 : anErrorParameter).
           			self assert: (assert2 : anErrorParameter). ]
		 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:07:15' prior: 50530217!
test03CanNotAddACustomerWithEmptyName 

	| customerBook anAction assert1 assert2 |
			
	customerBook := CustomerBook new.
	
	anAction := 	[ customerBook addCustomerNamed: ''.].
	assert1 := [:anErrorParameter | anErrorParameter messageText = CustomerBook customerCanNotBeEmptyErrorMessage.].
	assert2 := [:anErrorParameter | customerBook isEmpty]. 
	
	self doing: anAction throws: Error thatAsserts: assert1 and: assert2
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 11:07:26'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 11:07:26'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:07:26'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 11:07:26'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:07:26'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:07:26'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 11:07:26'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 11:07:26'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:07:26'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:07:50' prior: 50530559!
doing: anAction throws: anError thatAsserts: assert1 and: assert2

	[ anAction value.
	self fail ]
		on: anError 
		do:  [ :anErrorParameter | 
            			self assert: (assert1 value: anErrorParameter).
           			self assert: (assert2 value: anErrorParameter). ]
		 
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 11:07:53'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 11:07:53'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:07:53'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 11:07:53'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:07:53'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:07:53'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 11:07:53'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 11:07:53'!
PASSED!

----SNAPSHOT----(9 April 2024 11:08:20) CuisUniversity-6169.image priorSource: 6364209!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:09:01' prior: 50530620!
doing: anAction throws: anError thatAsserts: assert1 and: assert2

	[ anAction value.
	self fail ]
		on: anError 
		do:  [ :anErrorParameter | 
            			self assert: (assert1 value: anErrorParameter).
           			self assert: (assert2 value). ]
		 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:09:28' prior: 50530664!
doing: anAction throws: anError thatAsserts: assert1 and: assert2

	[ anAction value.
	self fail ]
		on: anError 
		do:  [ :anErrorParameter | 
            			self assert: (assert1 value: anErrorParameter).
           			self assert: (assert2 value: anErrorParameter). ]
		 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:13:33' prior: 50530233!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon anAction assert1 assert2 |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	anAction := [customerBook removeCustomerNamed: 'Paul McCartney'.].
	assert1 := [:anErrorParameter | customerBook numberOfCustomers = 1.].
	assert2 := [:anErrorParameter | (customerBook includesCustomerNamed: johnLennon).].

	self doing: anAction throws: NotFound thatAsserts: assert1 and: assert2
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:13:58' prior: 50530687!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon anAction assert1 assert2 |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	anAction := [customerBook removeCustomerNamed: 'Paul McCartney'.].
	assert1 := [:anErrorParameter | customerBook numberOfCustomers = 1.].
	assert2 := [:anErrorParameter | (customerBook includesCustomerNamed: johnLennon).].

	self doing: anAction throws: NotFound thatAsserts: assert1 and: assert2 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:14:33' prior: 50530675!
doing: anAction throws: anError thatAsserts: assert1 and: assert2

	[ anAction value.
	self fail ]
		on: anError 
		do:  [ :anErrorParameter | 
            			self assert: (assert1 value: anErrorParameter).
           			self assert: (assert2 value: anErrorParameter). ]
		 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:14:52' prior: 50530725!
doing: anAction throws: anError thatAsserts: assert1 and: assert2

	[ anAction value.
	self fail ]
		on: anError 
		do:  [ :anErrorParameter | 
            			self assert: (assert1 value: anErrorParameter).
           			self assert: (assert2 value: anErrorParameter). ]
		 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:15:27' prior: 50530737!
doing: anAction throws: anError thatAsserts: assert1 and: assert2

	"preguntar si se puede poner para que se puedan pasar una cantidad de asserts no definida, o sea, and:and:and ... "

	[ anAction value.
	self fail ]
		on: anError 
		do:  [ :anErrorParameter | 
            			self assert: (assert1 value: anErrorParameter).
           			self assert: (assert2 value: anErrorParameter). ]
		 
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 11:15:40'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 11:15:40'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:15:40'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 11:15:40'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:15:40'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:15:40'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 11:15:40'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 11:15:40'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 11:15:54'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 11:15:54'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:15:54'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 11:15:54'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:15:54'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:15:54'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 11:15:54'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 11:15:54'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:17:06' prior: 50530251!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon anAction assert1 assert2|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	anAction := [customerBook suspendCustomerNamed: 'George Harrison'.].
	assert1 := [:anErrorParameter | customerBook numberOfCustomers = 1.].
	assert2 := [:anErrorParameter | (customerBook includesCustomerNamed: johnLennon).].
	
	self doing: anAction throws: CantSuspend thatAsserts: assert1 and: assert2
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 11:17:08'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 11:17:08'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:17:08'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 11:17:08'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:17:08'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:17:08'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 11:17:08'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 11:17:08'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:18:17' prior: 50530288!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon anAction assert1 assert2 |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	anAction := [customerBook suspendCustomerNamed: johnLennon.].
	assert1 := [:anErrorParameter |  customerBook numberOfCustomers = 1.].
	assert2 := [:anErrorParameter | (customerBook includesCustomerNamed: johnLennon).].
	
	self doing: anAction throws: CantSuspend thatAsserts: assert1 and: assert2.


! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 11:18:20'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 11:18:20'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:18:20'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 11:18:20'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:18:20'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:18:20'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 11:18:20'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 11:18:20'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 11:19:03'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 11:19:03'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:19:03'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 11:19:03'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:19:03'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:19:03'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 11:19:03'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 11:19:03'!
PASSED!

|x|

x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	!

|x|

x := Dictionary new.
	x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
	
	x add:#e->42.
	x keys!

 #(#b #a #e #d #c) !

----SNAPSHOT----(9 April 2024 11:28:07) CuisUniversity-6169.image priorSource: 6368328!

!methodRemoval: CustomerBookTest #doing:throws:thatVerifies: stamp: 'fb 4/9/2024 11:28:21'!
doing: anAction throws: anError thatVerifies: aCodeBlock

	[ anAction value.
	self fail ]
		on: anError 
		do: aCodeBlock!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:33:53'!
arrayOfAsserts: array1 equalsArrayOfCode: array2

	(1 to: array1 size) 
		do: [:index | self assert: (array1 at: index) equals: (array2 at:index)].

! !

----SNAPSHOT----(9 April 2024 11:34:01) CuisUniversity-6169.image priorSource: 6377905!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:34:39' prior: 50529515!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney assertsArray actionsArray|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:36:23' prior: 50530981!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney assertsArray actionsArray action1 action2 action3|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	assertsArray := #(0 1 1).
	
	action1 := customerBook numberOfActiveCustomers.
	actionsArray := #(action1  ).
		
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:36:50' prior: 50531002!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney assertsArray actionsArray action1 action2 action3|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	assertsArray := #(0 1 1).
	
	action1 := customerBook numberOfActiveCustomers.
	action2 := customerBook numberOfSuspendedCustomers.
	action3 := customerBook numberOfCustomers.
	actionsArray := #(action1 action2 action3).
		
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:38:27' prior: 50531027!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney assertsArray actionsArray action1 action2 action3|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	assertsArray := #(0 1 1).
	
	action1 := customerBook numberOfActiveCustomers.
	action2 := customerBook numberOfSuspendedCustomers.
	action3 := customerBook numberOfCustomers.
	actionsArray := #(action1 action2 action3).
	
	self arrayOfAsserts: assertsArray equalsArrayOfCode: actionsArray.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 11:38:50'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 11:38:50'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:38:50'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 11:38:50'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:38:50'!
FAILURE!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:38:50'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 11:38:50'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 11:38:50'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:38:50'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:43:10' prior: 50531055!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney assertsArray actionsArray action1 action2 action3|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	assertsArray := {0. 1. 1.}.
	
	action1 := customerBook numberOfActiveCustomers.
	action2 := customerBook numberOfSuspendedCustomers.
	action3 := customerBook numberOfCustomers.
	actionsArray := {action1. action2. action3.}.
	
	self arrayOfAsserts: assertsArray equalsArrayOfCode: actionsArray.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 11:43:13'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 11:43:13'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:43:13'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 11:43:13'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:43:13'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:43:13'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 11:43:13'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 11:43:13'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:44:11' prior: 50531113!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney assertsArray actionsArray action1 action2 action3 |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	assertsArray := {0. 1. 1.}.
	
	action1 := customerBook numberOfActiveCustomers.
	action2 := customerBook numberOfSuspendedCustomers.
	action3 := customerBook numberOfCustomers.
	actionsArray := {action1. action2. action3.}.
	
	self arrayOfAsserts: assertsArray equalsArrayOfCode: actionsArray.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:45:35' prior: 50529534!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney assertsArray actionsArray action1 action2 action3 |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	assertsArray := {0. 0. 0.}.
	
	action1 := customerBook numberOfActiveCustomers.
	action2 := customerBook numberOfSuspendedCustomers.
	action3 := customerBook numberOfCustomers.
	actionsArray := {action1. action2. action3.}.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:48:37'!
checkThat: aCustomerBook has: array1

	self assert: (array1 at: 1) equals: aCustomerBook numberOfActiveCustomers.
	self assert: (array1 at: 2) equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: (array1 at: 3) equals: aCustomerBook numberOfCustomers.! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:49:18' prior: 50531167!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney assertsArray |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	assertsArray := {0. 1. 1.}.
	
	self checkThat: customerBook has: assertsArray. 
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 11:49:24'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 11:49:24'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:49:24'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 11:49:24'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:49:24'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:49:24'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 11:49:24'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 11:49:24'!
PASSED!

!methodRemoval: CustomerBookTest #arrayOfAsserts:equalsArrayOfCode: stamp: 'fb 4/9/2024 11:49:30'!
arrayOfAsserts: array1 equalsArrayOfCode: array2

	(1 to: array1 size) 
		do: [:index | self assert: (array1 at: index) equals: (array2 at:index)].

!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:51:33'!
checkThat: aCustomerBook has: aNumberOfActiveCustomers and: aNumberOfSuspendedCustomers and: aNumberOfCustomers

	self assert: aNumberOfActiveCustomers equals: aCustomerBook numberOfActiveCustomers.
	self assert: aNumberOfSuspendedCustomers equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: aNumberOfCustomers equals: aCustomerBook numberOfCustomers.! !

!methodRemoval: CustomerBookTest #checkThat:has: stamp: 'fb 4/9/2024 11:52:47'!
checkThat: aCustomerBook has: array1

	self assert: (array1 at: 1) equals: aCustomerBook numberOfActiveCustomers.
	self assert: (array1 at: 2) equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: (array1 at: 3) equals: aCustomerBook numberOfCustomers.!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:53:20' prior: 50531233!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self checkThat: customerBook has: 0 and: 1 and: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 11:53:26'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 11:53:26'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:53:26'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 11:53:26'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:53:26'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:53:26'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 11:53:26'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 11:53:26'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:54:15' prior: 50531192!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self checkThat: customerBook has: 0 and: 0 and: 0.

	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:54:57'!
checkThat: aCustomerBook hasActive: aNumberOfActiveCustomers andSuspended: aNumberOfSuspendedCustomers andTotal: aNumberOfCustomers

	self assert: aNumberOfActiveCustomers equals: aCustomerBook numberOfActiveCustomers.
	self assert: aNumberOfSuspendedCustomers equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: aNumberOfCustomers equals: aCustomerBook numberOfCustomers.! !

!methodRemoval: CustomerBookTest #checkThat:has:and:and: stamp: 'fb 4/9/2024 11:55:01'!
checkThat: aCustomerBook has: aNumberOfActiveCustomers and: aNumberOfSuspendedCustomers and: aNumberOfCustomers

	self assert: aNumberOfActiveCustomers equals: aCustomerBook numberOfActiveCustomers.
	self assert: aNumberOfSuspendedCustomers equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: aNumberOfCustomers equals: aCustomerBook numberOfCustomers.!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:55:11' prior: 50531312!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self checkThat: customerBook hasActive: 0 andSuspended: 1 andTotal: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/9/2024 11:55:24' prior: 50531357!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self checkThat: customerBook hasActive: 0 andSuspended: 0 andTotal: 0.

	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 11:55:43'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 11:55:43'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 11:55:43'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 11:55:43'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:55:43'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 11:55:43'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 11:55:43'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 11:55:43'!
PASSED!

----SNAPSHOT----(9 April 2024 11:55:45) CuisUniversity-6169.image priorSource: 6378456!
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/9/2024 12:00:09' prior: 50529618!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	(self includesCustomerNamed: aName)  ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 12:00:13'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:00:13'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 12:00:13'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 12:00:13'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:00:13'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:00:13'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 12:00:13'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 12:00:13'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/9/2024 12:03:12'!
removeACustomer: aCustomerName from: aCustomersArray

1 to: aCustomerName size do: 
    [ :index |
        aCustomerName = (aCustomerName at: index)
            ifTrue: [
                aCustomerName removeAt: index.
                ^ aCustomerName 
            ] 
    ].! !
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/9/2024 12:03:53' prior: 50529641!
removeCustomerNamed: aName 
 
	self removeACustomer: aName from: active.
	self removeACustomer: aName from: suspended

	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/9/2024 12:03:56' prior: 50531521!
removeCustomerNamed: aName 
 
	self removeACustomer: aName from: active.
	self removeACustomer: aName from: suspended.

	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 12:04:01'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:04:01'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 12:04:01'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 12:04:01'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:04:01'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:04:01'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 12:04:01'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 12:04:01'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:04:08'!
ERROR!
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/9/2024 12:04:56' prior: 50531509!
removeACustomer: aCustomerName from: aCustomersArray

1 to: aCustomersArray size do: 
    [ :index |
        aCustomerName = (aCustomersArray at: index)
            ifTrue: [
                aCustomersArray removeAt: index.
                ^ aCustomerName 
            ] 
    ].! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 12:05:01'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:05:01'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 12:05:01'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 12:05:01'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:05:01'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:05:01'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 12:05:01'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 12:05:01'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 12:06:24'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:06:24'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 12:06:24'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 12:06:24'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:06:24'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:06:24'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 12:06:24'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 12:06:24'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:06:26'!
ERROR!
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/9/2024 12:08:16'!
active
	^active! !
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/9/2024 12:08:25'!
suspended
	^suspended! !
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/9/2024 12:08:38' prior: 50531529!
removeCustomerNamed: aName 
 
	self removeACustomer: aName from: self active.
	self removeACustomer: aName from: self suspended.

	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/9/2024 12:08:45' prior: 50531653!
removeCustomerNamed: aName 
 
	self removeACustomer: aName from: (self active).
	self removeACustomer: aName from: (self suspended).

	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 12:08:50'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:08:50'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 12:08:50'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 12:08:50'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:08:50'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:08:51'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 12:08:51'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 12:08:51'!
PASSED!

!methodRemoval: CustomerBook #active stamp: 'fb 4/9/2024 12:09:25'!
active
	^active!

!methodRemoval: CustomerBook #suspended stamp: 'fb 4/9/2024 12:09:28'!
suspended
	^suspended!
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/9/2024 12:09:43' prior: 50531661!
removeCustomerNamed: aName 
 
	self removeACustomer: aName from: active.
	self removeACustomer: aName from: suspended.

	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 12:11:05'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:11:05'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 12:11:05'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 12:11:05'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:11:05'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:11:05'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 12:11:05'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 12:11:05'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:11:08'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:11:33'!
FAILURE!

----SNAPSHOT----(9 April 2024 12:11:55) CuisUniversity-6169.image priorSource: 6394116!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:12:07'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:13:25'!
FAILURE!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:13:32'!
ERROR!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/9/2024 12:14:31'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/9/2024 12:14:31'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/9/2024 12:14:31'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/9/2024 12:14:31'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:14:31'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:14:31'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/9/2024 12:14:31'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/9/2024 12:14:31'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/9/2024 12:14:34'!
ERROR!

----SNAPSHOT----(9 April 2024 12:28:26) CuisUniversity-6169.image priorSource: 6403167!

----STARTUP---- (11 April 2024 17:55:40) as /home/felipe/Documentos/CUIS/linux64/CuisUniversity-6169.image!

!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:03:51' prior: 50529811!
doing:anActionToMeasure shouldNotTakeMoreThan: numberOfMilliseconds 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anActionToMeasure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (numberOfMilliseconds * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:05:59' prior: 50531805!
doing:anActionToMeasure shouldNotTakeMoreThan: aTimeLimit 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anActionToMeasure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (aTimeLimit)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:08:02' prior: 50531821!
doing:aBlockToMeasure shouldNotTakeMoreThan: aTimeLimit 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockToMeasure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (aTimeLimit)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:11:32'!
checkThatDoing: anAction doesntExceed: aTimeLimit 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (aTimeLimit)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:13:00'!
should: aBlockToMeasure takesLessThan: aTimeLimit 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockToMeasure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (aTimeLimit)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:13:23'!
assert: aBlockToMeasure takesLessThan: aTimeLimit 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockToMeasure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (aTimeLimit)
	
! !

!methodRemoval: CustomerBookTest #checkThatDoing:doesntExceed: stamp: 'fb 4/11/2024 18:13:39'!
checkThatDoing: anAction doesntExceed: aTimeLimit 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (aTimeLimit)
	
!

!methodRemoval: CustomerBookTest #should:takesLessThan: stamp: 'fb 4/11/2024 18:13:43'!
should: aBlockToMeasure takesLessThan: aTimeLimit 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockToMeasure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (aTimeLimit)
	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:14:01' prior: 50531836!
doing:aBlockToMeasure shouldNotTakeMoreThan: aTimeLimit 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockToMeasure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < aTimeLimit
	
! !

!methodRemoval: CustomerBookTest #doing:shouldNotTakeMoreThan: stamp: 'fb 4/11/2024 18:14:07'!
doing:aBlockToMeasure shouldNotTakeMoreThan: aTimeLimit 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockToMeasure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < aTimeLimit
	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:14:23' prior: 50529800!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assert:[customerBook addCustomerNamed: 'John Lennon'.] takesLessThan: 50! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:14:51' prior: 50529918!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	self assert:[customerBook removeCustomerNamed: 'Paul McCartney'.] takesLessThan: 100
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/11/2024 18:14:59'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/11/2024 18:14:59'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/11/2024 18:14:59'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/11/2024 18:14:59'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:14:59'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:14:59'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/11/2024 18:14:59'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/11/2024 18:14:59'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:15:31' prior: 50531950!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self should:[customerBook addCustomerNamed: 'John Lennon'.] takesLessThan: 50! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:15:36' prior: 50531959!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	self should:[customerBook removeCustomerNamed: 'Paul McCartney'.] takesLessThan: 100
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:15:40'!
should: aBlockToMeasure takesLessThan: aTimeLimit 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockToMeasure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (aTimeLimit)
	
! !

!methodRemoval: CustomerBookTest #assert:takesLessThan: stamp: 'fb 4/11/2024 18:15:42'!
assert: aBlockToMeasure takesLessThan: aTimeLimit 

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockToMeasure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (aTimeLimit)
	
!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/11/2024 18:15:45'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/11/2024 18:15:45'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/11/2024 18:15:45'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/11/2024 18:15:45'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:15:45'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:15:45'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/11/2024 18:15:45'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/11/2024 18:15:45'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:16:44' prior: 50532002!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self should:[customerBook addCustomerNamed: 'John Lennon'.] takesLessThan: 50*millisecond! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:16:49' prior: 50532011!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	self should:[customerBook removeCustomerNamed: 'Paul McCartney'.] takesLessThan: 100*millisecond
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/11/2024 18:16:53'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/11/2024 18:16:53'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/11/2024 18:16:53'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/11/2024 18:16:53'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:16:53'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:16:53'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/11/2024 18:16:53'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/11/2024 18:16:53'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:17:07' prior: 50532092!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	self should:[customerBook removeCustomerNamed: 'Paul McCartney'.] takesLessThan: (100*millisecond)
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/11/2024 18:17:10'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/11/2024 18:17:10'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/11/2024 18:17:10'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/11/2024 18:17:10'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:17:10'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:17:10'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/11/2024 18:17:10'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/11/2024 18:17:10'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:17:27' prior: 50532135!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	self should:[customerBook removeCustomerNamed: 'Paul McCartney'.] takesLessThan: 100*millisecond
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/11/2024 18:17:32'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/11/2024 18:17:32'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/11/2024 18:17:32'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/11/2024 18:17:32'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:17:32'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:17:32'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/11/2024 18:17:32'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/11/2024 18:17:32'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:18:21' prior: 50532082!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self should:[customerBook addCustomerNamed: 'John Lennon'.] takesLessThan: (50*millisecond)! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:18:27' prior: 50532178!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	self should:[customerBook removeCustomerNamed: 'Paul McCartney'.] takesLessThan: (100*millisecond)
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/11/2024 18:18:31'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/11/2024 18:18:31'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/11/2024 18:18:31'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/11/2024 18:18:31'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:18:31'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:18:31'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/11/2024 18:18:31'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/11/2024 18:18:31'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/11/2024 18:19:12'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/11/2024 18:19:12'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/11/2024 18:19:12'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/11/2024 18:19:12'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:19:12'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:19:12'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/11/2024 18:19:12'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/11/2024 18:19:12'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/11/2024 18:19:14'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:23:07'!
measureCurrentTime
	^Time millisecondClockValue * millisecond.
! !

!methodRemoval: CustomerBookTest #measureCurrentTime stamp: 'fb 4/11/2024 18:23:30'!
measureCurrentTime
	^Time millisecondClockValue * millisecond.
!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:24:33'!
timeToRun: aBlockToMeasure

	| millisecondsBeforeRunning  millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlockToMeasure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^millisecondsAfterRunning-millisecondsBeforeRunning
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:25:31' prior: 50532023!
should: aBlockToMeasure takesLessThan: aTimeLimit 

	self assert: (self timeToRun: [aBlockToMeasure value.]) < (aTimeLimit)
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/11/2024 18:25:34'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/11/2024 18:25:34'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/11/2024 18:25:34'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/11/2024 18:25:34'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:25:34'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:25:34'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/11/2024 18:25:34'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/11/2024 18:25:34'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:27:25' prior: 50532330!
should: aBlockToMeasure takesLessThan: aTimeLimit 

	self assert: (self timeToRun: aBlockToMeasure) < (aTimeLimit)
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/11/2024 18:27:30'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/11/2024 18:27:30'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/11/2024 18:27:30'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/11/2024 18:27:30'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:27:30'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:27:30'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/11/2024 18:27:30'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/11/2024 18:27:30'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:38:47' prior: 50530749!
doing: anAction throws: anErrorType thatAsserts: assert1 and: assert2

	"preguntar si se puede poner para que se puedan pasar una cantidad de asserts no definida, o sea, and:and:and ... "

	[ anAction value.
	self fail ]
		on: anErrorType
		do:  [ :anErrorParameter | 
            			self assert: (assert1 value: anErrorParameter).
           			self assert: (assert2 value: anErrorParameter). ]
		 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:41:14' prior: 50532404!
doing: aBlockThatShouldFail throws: anErrorType thatAsserts: assert1 and: assert2

	"preguntar si se puede poner para que se puedan pasar una cantidad de asserts no definida, o sea, and:and:and ... "

	[ aBlockThatShouldFail value.
	self fail ]
		on: anErrorType
		do:  [ :anErrorParameter | 
            			self assert: (assert1 value: anErrorParameter).
           			self assert: (assert2 value: anErrorParameter). ]
		 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:42:28'!
should: aBlockThatShouldFail raises: anErrorType thatAsserts: assert1 and: assert2

	"preguntar si se puede poner para que se puedan pasar una cantidad de asserts no definida, o sea, and:and:and ... "

	[ aBlockThatShouldFail value.
	self fail ]
		on: anErrorType
		do:  [ :anErrorParameter | 
            			self assert: (assert1 value: anErrorParameter).
           			self assert: (assert2 value: anErrorParameter). ]
		 
! !

!methodRemoval: CustomerBookTest #doing:throws:thatAsserts:and: stamp: 'fb 4/11/2024 18:42:45'!
doing: aBlockThatShouldFail throws: anErrorType thatAsserts: assert1 and: assert2

	"preguntar si se puede poner para que se puedan pasar una cantidad de asserts no definida, o sea, and:and:and ... "

	[ aBlockThatShouldFail value.
	self fail ]
		on: anErrorType
		do:  [ :anErrorParameter | 
            			self assert: (assert1 value: anErrorParameter).
           			self assert: (assert2 value: anErrorParameter). ]
		 
!
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:42:56' prior: 50530571!
test03CanNotAddACustomerWithEmptyName 

	| customerBook anAction assert1 assert2 |
			
	customerBook := CustomerBook new.
	
	anAction := 	[ customerBook addCustomerNamed: ''.].
	assert1 := [:anErrorParameter | anErrorParameter messageText = CustomerBook customerCanNotBeEmptyErrorMessage.].
	assert2 := [:anErrorParameter | customerBook isEmpty]. 
	
	self should: anAction raises: Error thatAsserts: assert1 and: assert2
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:43:13' prior: 50530706!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon anAction assert1 assert2 |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	anAction := [customerBook removeCustomerNamed: 'Paul McCartney'.].
	assert1 := [:anErrorParameter | customerBook numberOfCustomers = 1.].
	assert2 := [:anErrorParameter | (customerBook includesCustomerNamed: johnLennon).].

	self should: anAction raises: NotFound thatAsserts: assert1 and: assert2 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:43:25' prior: 50530824!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon anAction assert1 assert2|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	anAction := [customerBook suspendCustomerNamed: 'George Harrison'.].
	assert1 := [:anErrorParameter | customerBook numberOfCustomers = 1.].
	assert2 := [:anErrorParameter | (customerBook includesCustomerNamed: johnLennon).].
	
	self should: anAction raises: CantSuspend thatAsserts: assert1 and: assert2
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'fb 4/11/2024 18:43:31' prior: 50530873!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon anAction assert1 assert2 |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	anAction := [customerBook suspendCustomerNamed: johnLennon.].
	assert1 := [:anErrorParameter |  customerBook numberOfCustomers = 1.].
	assert2 := [:anErrorParameter | (customerBook includesCustomerNamed: johnLennon).].
	
	self should: anAction raises: CantSuspend thatAsserts: assert1 and: assert2.


! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/11/2024 18:43:35'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/11/2024 18:43:35'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/11/2024 18:43:35'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/11/2024 18:43:35'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:43:35'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/11/2024 18:43:35'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/11/2024 18:43:35'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/11/2024 18:43:35'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/11/2024 18:58:29' prior: 50531570!
removeACustomer: aCustomerName from: aCustomersArray

	1 to: aCustomersArray size do: 
	    [ :index |
	        aCustomerName = (aCustomersArray at: index)
	            ifTrue: [
	                aCustomersArray removeAt: index.
	                ^ aCustomerName 
	            ] 
	    ].! !
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/11/2024 18:59:43' prior: 50532575!
removeACustomer: aCustomerToRemove from: aCustomersArray

	1 to: aCustomersArray size do: 
	    [ :index |
	        aCustomerToRemove = (aCustomersArray at: index)
	            ifTrue: [
	                aCustomersArray removeAt: index.
	                ^ aCustomerToRemove 
	            ] 
	    ].! !
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/11/2024 19:03:45' prior: 50532588!
removeACustomer: aCustomerToRemove from: aCustomersArray

	1 to: aCustomersArray size do: 
	    [ :index |
	        aCustomerToRemove = (aCustomersArray at: index)
	            ifTrue: [
	                aCustomersArray removeAt: index.
	                ^ aCustomerToRemove 
	            ] 
	    ].! !
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/11/2024 19:04:19'!
remove: aCustomerToRemove from: aCustomersArray

	1 to: aCustomersArray size do: 
	    [ :index |
	        aCustomerToRemove = (aCustomersArray at: index)
	            ifTrue: [
	                aCustomersArray removeAt: index.
	                ^ aCustomerToRemove 
	            ] 
	    ].! !
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/11/2024 19:04:34' prior: 50531705!
removeCustomerNamed: aName 
 
	self remove: aName from: active.
	self remove: aName from: suspended.

	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/11/2024 19:07:51'!
remove: aCustomerToRemove from: aCustomersArray ifAbsent: aBlockToContinue

	1 to: aCustomersArray size do: 
	    [ :index |
	        aCustomerToRemove = (aCustomersArray at: index)
	            ifTrue: [
	                aCustomersArray removeAt: index.
	                ^ aCustomerToRemove 
	            ] 
	    ].! !
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/11/2024 19:08:07' prior: 50532633!
remove: aCustomerToRemove from: aCustomersArray ifAbsent: aBlockToContinue

	1 to: aCustomersArray size do: 
	    [ :index |
	        aCustomerToRemove = (aCustomersArray at: index)
	            ifTrue: [
	                aCustomersArray removeAt: index.
	                ^ aCustomerToRemove 
	            ] 
	    ].

	aBlockToContinue value.! !
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/11/2024 19:09:43' prior: 50532646!
remove: aCustomerToRemove from: aCustomersArray ifAbsent: aBlockToContinue

	1 to: aCustomersArray size do: 
	    [ :index |
	        aCustomerToRemove = (aCustomersArray at: index)
	            ifTrue: [
	                aCustomersArray removeAt: index.
	                ^ aCustomerToRemove 
	            ] 
	    ].

	^aBlockToContinue value.! !

!methodRemoval: CustomerBook #removeACustomer:from: stamp: 'fb 4/11/2024 19:09:53'!
removeACustomer: aCustomerToRemove from: aCustomersArray

	1 to: aCustomersArray size do: 
	    [ :index |
	        aCustomerToRemove = (aCustomersArray at: index)
	            ifTrue: [
	                aCustomersArray removeAt: index.
	                ^ aCustomerToRemove 
	            ] 
	    ].!
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/11/2024 19:10:59' prior: 50532626!
removeCustomerNamed: aName 
 
	self remove: aName from: active ifAbsent:[self remove: aName from:suspended ifAbsent: [^ NotFound signal.]]

	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'fb 4/11/2024 19:11:02'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'fb 4/11/2024 19:11:02'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'fb 4/11/2024 19:11:02'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'fb 4/11/2024 19:11:02'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'fb 4/11/2024 19:11:02'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'fb 4/11/2024 19:11:02'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'fb 4/11/2024 19:11:02'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'fb 4/11/2024 19:11:02'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'fb 4/11/2024 19:11:11' prior: 50532686!
removeCustomerNamed: aName 
 
	self remove: aName from: active ifAbsent:[self remove: aName from:suspended ifAbsent: [^ NotFound signal.]]
! !

!methodRemoval: CustomerBook #remove:from: stamp: 'fb 4/11/2024 19:14:32'!
remove: aCustomerToRemove from: aCustomersArray

	1 to: aCustomersArray size do: 
	    [ :index |
	        aCustomerToRemove = (aCustomersArray at: index)
	            ifTrue: [
	                aCustomersArray removeAt: index.
	                ^ aCustomerToRemove 
	            ] 
	    ].!

----STARTUP---- (29 April 2024 17:09:48) as /home/felipe/Documentos/CUIS/linux64/CuisUniversity-6169.image!


!classRemoval: #CustomerBook stamp: 'fb 4/29/2024 17:10:00'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'fb 4/29/2024 17:10:00'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'fb 4/29/2024 17:10:00'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'fb 4/29/2024 17:10:01'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of /home/felipe/Documentos/CUIS/linux64/ISW1-2024-1C-Parcial.st----!

----STARTUP---- (29 April 2024 17:11:42) as /home/felipe/Documentos/CUIS/linux64/CuisUniversity-6169.image!


----End fileIn of /home/felipe/Documentos/CUIS/linux64/ISW1-2024-1C-Parcial.st----!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:12:12'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:12:12'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:12:12'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:12:12'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:12:12'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:12:12'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:12:12'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:12:12'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:12:12'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 17:12:19'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 17:12:22'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 17:12:22'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:17:37'!
initializeWith: aPriceList and: aNumberOfRooms

	prices := aPriceList! !
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:17:56' prior: 50533061!
initializeWith: aPriceList and: aNumberOfRooms

	| ix |
	
	rooms := OrderedCollection new.
	
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]
! !
!Floor class methodsFor: 'exceptions' stamp: 'fb 4/29/2024 17:18:13' overrides: 16787772!
new

	! !
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:18:38' prior: 50533066!
initializeWith: aPriceList and: aNumberOfRooms

	| ix |
	
	prices := aPriceList.
	
	rooms := OrderedCollection new.
	
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]
! !
!Floor class methodsFor: 'exceptions' stamp: 'fb 4/29/2024 17:19:06'!
with: aPriceList and: aNumberOfRooms! !

!methodRemoval: Floor class #new stamp: 'fb 4/29/2024 17:19:18'!
new

	!
!Floor class methodsFor: 'exceptions' stamp: 'fb 4/29/2024 17:19:37' prior: 50533087!
with: aPriceList and: aNumberOfRooms

	^ self new initializeWith: aPriceList and: aNumberOfRooms ! !

!methodRemoval: Floor #initializeWith:and: stamp: 'fb 4/29/2024 17:20:49'!
initializeWith: aPriceList and: aNumberOfRooms

	| ix |
	
	prices := aPriceList.
	
	rooms := OrderedCollection new.
	
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]
!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:20:52'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:20:52'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:20:52'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:20:52'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:20:52'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:20:52'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:20:52'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:20:52'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:20:52'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:21:27'!
initializeWith: aPriceList and: aNumberOfRooms

	prices := aPriceList! !
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:22:02' prior: 50533145!
initializeWith: aPriceList and: aNumberOfRooms

	prices := aPriceList
	
	! !
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:23:43' prior: 50533150!
initializeWith: aPriceList and: aNumberOfRooms

	prices := aPriceList.
	
	self setNumberOfRooms: aNumberOfRooms.
	self setPrices: aPriceList.
! !
!FloorTest methodsFor: 'create' stamp: 'fb 4/29/2024 17:24:23' prior: 50531945!
createFloorWith: aNumberOfRooms and: aPrice

	| floor |

	floor := Floor new initializeWith: aNumberOfRooms and: aPrice.
"
	floor := Floor new.
	floor setNumberOfRooms: aNumberOfRooms.
	floor setPrices: aPrice.
	"
	^ floor.! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:24:24'!
ERROR!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:24:24'!
ERROR!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:24:24'!
ERROR!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:24:24'!
ERROR!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:24:24'!
ERROR!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:24:24'!
ERROR!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:24:24'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:24:24'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:24:24'!
ERROR!
!FloorTest methodsFor: 'create' stamp: 'fb 4/29/2024 17:25:14' prior: 50533164!
createFloorWith: aNumberOfRooms and: aPrice

	| floor |

	floor := Floor new initializeWith: aPrice and: aNumberOfRooms.
"
	floor := Floor new.
	floor setNumberOfRooms: aNumberOfRooms.
	floor setPrices: aPrice.
	"
	^ floor.! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:25:15'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:25:15'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:25:15'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:25:15'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:25:15'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:25:15'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:25:15'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:25:15'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:25:15'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:25:17'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:25:17'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:25:17'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:25:17'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:25:17'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:25:17'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:25:17'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:25:17'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:25:17'!
PASSED!
!Floor class methodsFor: 'exceptions' stamp: 'fb 4/29/2024 17:25:41' prior: 50533094!
with: aPrice and: aNumberOfRooms

	^ self new initializeWith: aPrice and: aNumberOfRooms ! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:25:42'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:25:42'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:25:42'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:25:42'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:25:42'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:25:42'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:25:42'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:25:42'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:25:42'!
PASSED!
!Floor methodsFor: 'setters' stamp: 'fb 4/29/2024 17:27:02' prior: 50532546!
setPrices: aPriceList

	aPriceList isEmpty ifTrue: [ self class signalNoPrices ].
	
	aPriceList values do: [ :price | 
		self class assertIsPositive: price ifFalse: [ self class signalPriceMustBePositive ].
	].
	
	prices := aPriceList.! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:27:04'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:27:04'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:27:04'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:27:04'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:27:04'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:27:04'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:27:04'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:27:04'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:27:04'!
PASSED!
!Floor methodsFor: 'setters' stamp: 'fb 4/29/2024 17:27:52'!
initializePriceList: aPriceList

	aPriceList isEmpty ifTrue: [ self class signalNoPrices ].
	
	aPriceList values do: [ :price | 
		self class assertIsPositive: price ifFalse: [ self class signalPriceMustBePositive ].
	].
	
	prices := aPriceList.! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:27:52' prior: 50533156!
initializeWith: aPriceList and: aNumberOfRooms

	prices := aPriceList.
	
	self setNumberOfRooms: aNumberOfRooms.
	self initializePriceList: aPriceList.
! !
!HotelTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:27:52' prior: 50532216!
createFloorWith: aNumberOfRooms and: aPrice

	| floor |

	floor := Floor new.
	floor setNumberOfRooms: aNumberOfRooms.
	floor initializePriceList: aPrice.
	
	^ floor.! !

!methodRemoval: Floor #setPrices: stamp: 'fb 4/29/2024 17:27:52'!
setPrices: aPriceList

	aPriceList isEmpty ifTrue: [ self class signalNoPrices ].
	
	aPriceList values do: [ :price | 
		self class assertIsPositive: price ifFalse: [ self class signalPriceMustBePositive ].
	].
	
	prices := aPriceList.!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:27:52'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:27:52'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:27:53'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:27:53'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:27:53'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:27:53'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:27:53'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:27:53'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:27:53'!
PASSED!
!Floor methodsFor: 'setters' stamp: 'fb 4/29/2024 17:28:09'!
initializeNumberOfRooms: aNumberOfRooms

	self class assertIsPositive: aNumberOfRooms ifFalse: [ self class signalNumberOfRoomsMustBePositive ].
	self class assertIsInteger: aNumberOfRooms ifFalse: [ self class signalNumberOfRoomsMustBeInteger ].
	
	self initializeRoomsWith: aNumberOfRooms.
! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:28:09' prior: 50533391!
initializeWith: aPriceList and: aNumberOfRooms

	prices := aPriceList.
	
	self initializeNumberOfRooms: aNumberOfRooms.
	self initializePriceList: aPriceList.
! !
!HotelTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:28:09' prior: 50533399!
createFloorWith: aNumberOfRooms and: aPrice

	| floor |

	floor := Floor new.
	floor initializeNumberOfRooms: aNumberOfRooms.
	floor initializePriceList: aPrice.
	
	^ floor.! !

!methodRemoval: Floor #setNumberOfRooms: stamp: 'fb 4/29/2024 17:28:09'!
setNumberOfRooms: aNumberOfRooms

	self class assertIsPositive: aNumberOfRooms ifFalse: [ self class signalNumberOfRoomsMustBePositive ].
	self class assertIsInteger: aNumberOfRooms ifFalse: [ self class signalNumberOfRoomsMustBeInteger ].
	
	self initializeRoomsWith: aNumberOfRooms.
!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:28:10'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:28:10'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:28:10'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:28:10'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:28:10'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:28:10'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:28:10'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:28:10'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:28:10'!
PASSED!

----SNAPSHOT----(29 April 2024 17:29:18) CuisUniversity-6169.image priorSource: 6404718!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:30:56'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:30:56'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:30:56'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:30:56'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:30:56'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:30:56'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:30:56'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:30:56'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:30:56'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:33:12' prior: 50532574!
initializeRoomsWith: aNumberOfRooms


	| ix |
	
	rooms := OrderedCollection new.
	
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:33:12'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:33:12'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:33:12'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:33:12'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:33:12'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:33:12'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:33:12'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:33:12'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:33:12'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:33:56'!
initializePrices: aPriceList

	^ prices := aPriceList! !
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:33:56' prior: 50533380!
initializePriceList: aPriceList

	aPriceList isEmpty ifTrue: [ self class signalNoPrices ].
	
	aPriceList values do: [ :price | 
		self class assertIsPositive: price ifFalse: [ self class signalPriceMustBePositive ].
	].
	
	self initializePrices: aPriceList.! !
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:33:56' prior: 50532582!
initializeWith: aPriceList

	self initializePrices: aPriceList! !
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:33:56' prior: 50533465!
initializeWith: aPriceList and: aNumberOfRooms

	self initializePrices: aPriceList.
	
	self initializeNumberOfRooms: aNumberOfRooms.
	self initializePriceList: aPriceList.
! !
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:33:58' prior: 50533632!
initializeWith: aPriceList and: aNumberOfRooms

	self initializePrices: aPriceList.
	self initializeNumberOfRooms: aNumberOfRooms.
	self initializePriceList: aPriceList.
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:33:58'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:33:58'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:33:58'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:33:58'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:33:59'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:33:59'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:33:59'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:33:59'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:33:59'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:34:02' prior: 50533641!
initializeWith: aPriceList and: aNumberOfRooms


	self initializeNumberOfRooms: aNumberOfRooms.
	self initializePriceList: aPriceList.
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:34:02'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:34:02'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:34:02'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:34:02'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:34:02'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:34:02'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:34:02'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:34:02'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:34:02'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:34:04' prior: 50533685!
initializeWith: aPriceList and: aNumberOfRooms

	self initializePrices: aPriceList.
	self initializeNumberOfRooms: aNumberOfRooms.
	self initializePriceList: aPriceList.
! !
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:34:07' prior: 50533728!
initializeWith: aPriceList and: aNumberOfRooms

	self initializePrices: aPriceList.
	self initializeNumberOfRooms: aNumberOfRooms.
	self initializePriceList: aPriceList.
! !
!FloorTest methodsFor: 'create' stamp: 'fb 4/29/2024 17:34:26' prior: 50533210!
createFloorWith: aNumberOfRooms and: aPrice

	| floor |

	floor := Floor new initializeWith: aPrice and: aNumberOfRooms.

	^ floor.! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:34:27'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:34:27'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:34:27'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:34:27'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:34:27'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:34:27'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:34:27'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:34:27'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:34:27'!
PASSED!

!methodRemoval: Floor #initializeWith: stamp: 'fb 4/29/2024 17:35:25'!
initializeWith: aPriceList

	self initializePrices: aPriceList!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:35:27'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:35:27'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:35:27'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:35:27'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:35:27'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:35:27'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:35:27'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:35:27'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:35:27'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:35:43' prior: 50533737!
initializeWith: aPriceList and: aNumberOfRooms

	self initializeNumberOfRooms: aNumberOfRooms.
	self initializePriceList: aPriceList.
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:35:44'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:35:44'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:35:44'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:35:44'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:35:44'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:35:44'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:35:44'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:35:44'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:35:44'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:35:55' prior: 50533828!
initializeWith: aPrice and: aNumberOfRooms

	self initializeNumberOfRooms: aNumberOfRooms.
	self initializePriceList: aPrice.
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:35:56'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:35:56'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:35:56'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:35:56'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:35:56'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:35:56'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:35:56'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:35:56'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:35:56'!
PASSED!
!FloorTest methodsFor: 'create' stamp: 'fb 4/29/2024 17:36:27' prior: 50533745!
createFloorWith: aNumberOfRooms and: aPriceList

	| floor |

	floor := Floor new initializeWith: aPriceList and: aNumberOfRooms.

	^ floor.! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:36:29'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:36:29'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:36:29'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:36:29'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:36:29'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:36:29'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:36:29'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:36:29'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:36:29'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:36:42' prior: 50533871!
initializeWith: aPriceList and: aNumberOfRooms

	self initializeNumberOfRooms: aNumberOfRooms.
	self initializePriceList: aPriceList.
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:36:43'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:36:43'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:36:43'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:36:43'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:36:43'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:36:43'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:36:43'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:36:43'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:36:43'!
PASSED!

----SNAPSHOT----(29 April 2024 17:37:39) CuisUniversity-6169.image priorSource: 6460081!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:39:05'!
assertEveryPriceIsPositive: aPriceList

	^ aPriceList values do: [ :price | 
		self class assertIsPositive: price ifFalse: [ self class signalPriceMustBePositive ].
	]! !
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:39:05' prior: 50533616!
initializePriceList: aPriceList

	aPriceList isEmpty ifTrue: [ self class signalNoPrices ].
	
	self assertEveryPriceIsPositive: aPriceList.
	
	self initializePrices: aPriceList.! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 17:39:08'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 17:39:08'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 17:39:08'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 17:39:08'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 17:39:08'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 17:39:08'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 17:39:08'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 17:39:08'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 17:39:08'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:41:47' prior: 50533567!
initializeRoomsWith: aNumberOfRooms


	| ix |
	
	rooms := OrderedCollection new.
	
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 17:41:58'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 17:41:58'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:41:58'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 17:41:58'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:41:58'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 17:41:58'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 17:41:58'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 17:41:58'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 17:41:58'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 17:41:58'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 17:41:58'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 17:41:58'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 17:41:58'!
PASSED!
!HotelTest methodsFor: 'create' stamp: 'fb 4/29/2024 17:44:00'!
twoFloorsCollection

	^ OrderedCollection with: (self createFloorWith: 10 and: self defaultPriceList)
								      	 with: (self createFloorWith: 1 and: self defaultPriceList)! !
!HotelTest methodsFor: 'create' stamp: 'fb 4/29/2024 17:44:00' prior: 50532224!
createHotel

	^ Hotel new 
		      setFloors: (self twoFloorsCollection).
								! !
!HotelTest methodsFor: 'create' stamp: 'fb 4/29/2024 17:44:05' prior: 50534116!
createHotel

	^ Hotel new 
		      setFloors: self twoFloorsCollection.
								! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 17:44:06'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 17:44:06'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:44:06'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 17:44:06'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:44:06'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 17:44:06'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 17:44:06'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 17:44:06'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 17:44:06'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 17:44:06'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 17:44:06'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 17:44:06'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 17:44:06'!
PASSED!
!Hotel class methodsFor: 'exceptions' stamp: 'fb 4/29/2024 17:44:31'!
withFloors: aFloorsCollection! !
!Hotel methodsFor: 'setters' stamp: 'fb 4/29/2024 17:44:59'!
initializeWithFloors: aFloorsCollection

	self class assertHaveFloors: aFloorsCollection.

	floors := aFloorsCollection.
	
	availableRoomsCount := self totalRooms.! !
!HotelTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:44:59' prior: 50532081!
test08HotelLossesAreTheSumOfEachFloorLosses
	
	| hotel floor1 floor2 floors |
	
	
	floor1 := self createFloorWith: 10 and: self defaultPriceList.
	floor2 := self createFloorWith: 10 and: self defaultPriceList.

	floors := OrderedCollection with: floor1 with: floor2.
	hotel := 	Hotel new initializeWithFloors: floors.
	
	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 1.
	hotel receive: self guestTypeConference atFloor: 2 atRoom: 1.

	hotel reserveRoom: 4 atFloor: 1.
	hotel reserveRoom: 2 atFloor: 2.

	self assert: floor1 totalLosses + floor2 totalLosses equals:		hotel totalLosses.! !
!HotelTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:44:59' prior: 50532102!
test09HotelCannotReserveANonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self createFloorWith: 10 and: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new initializeWithFloors: floors.
	
	self 
	should: [ 	hotel reserveRoom: 42 atFloor: 1. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]
! !
!HotelTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:44:59' prior: 50532124!
test10HotelCannotReserveANonexistentFloor
	
	| hotel floor1 floors |
	
	floor1 := self createFloorWith: 10 and: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new initializeWithFloors: floors.
	
	self 
	should: [ 	hotel reserveRoom: 1 atFloor: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel floorNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:44:59' prior: 50534122!
createHotel

	^ Hotel new 
		      initializeWithFloors: self twoFloorsCollection.
								! !
!HotelTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:44:59' prior: 50532146!
test11HotelCannotReceiveAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self createFloorWith: 10 and: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new initializeWithFloors: floors.
	
	self 
	should: [ 	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:44:59' prior: 50532191!
test13HotelCannotReceiveWithReservationAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self createFloorWith: 10 and: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new initializeWithFloors: floors.

	hotel reserveRoom: 1 atFloor: 1. 
	
	self 
	should: [ 	hotel receiveWithReservation: self guestTypeVacation atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
		self assert: 1 equals: hotel totalRoomsReserved.
		self assert: 1 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:44:59' prior: 50531979!
test01CannotCreateHotelWithoutFloors

	self
		should: [ Hotel new initializeWithFloors: OrderedCollection new. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Hotel noFloorsErrorDescription.! !
!HotelTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:44:59' prior: 50532168!
test12HotelCannotReceiveAtNonexistentFloor
	
	| hotel floor1 floors |
	
	floor1 := self createFloorWith: 10 and: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new initializeWithFloors: floors.
	
	self 
	should: [ 	hotel receive: self guestTypeVacation atFloor: 42 atRoom: 1. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Hotel floorNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !
!HotelTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 17:44:59' prior: 50532062!
test07HotelProfitsAreTheSumOfEachFloorProfits
	
	| hotel floor1 floor2 floors |
	
	
	floor1 := self createFloorWith: 10 and: self defaultPriceList.
	floor2 := self createFloorWith: 10 and: self defaultPriceList.

	floors := OrderedCollection with: floor1 with: floor2.
	hotel := 	Hotel new initializeWithFloors: floors.
	
	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 1.
	hotel receive: self guestTypeConference atFloor: 2 atRoom: 1.

	self assert: floor1 totalProfits + floor2 totalProfits equals:		hotel totalProfits.! !

!methodRemoval: Hotel #setFloors: stamp: 'fb 4/29/2024 17:44:59'!
setFloors: aFloorsCollection

	self class assertHaveFloors: aFloorsCollection.

	floors := aFloorsCollection.
	
	availableRoomsCount := self totalRooms.!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 17:45:03'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 17:45:03'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:45:03'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 17:45:03'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:45:03'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 17:45:03'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 17:45:03'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 17:45:03'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 17:45:03'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 17:45:03'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 17:45:03'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 17:45:03'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 17:45:03'!
PASSED!
!Hotel class methodsFor: 'exceptions' stamp: 'fb 4/29/2024 17:45:59' prior: 50534172!
withFloors: aFloorsCollection

	^self new initializeWithFloors: aFloorsCollection! !
!HotelTest methodsFor: 'create' stamp: 'fb 4/29/2024 17:46:17' prior: 50534252!
createHotel

	^ Hotel withFloors: self twoFloorsCollection.
								! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 17:46:17'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 17:46:47'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 17:46:47'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:46:47'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 17:46:47'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:46:47'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 17:46:47'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 17:46:47'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 17:46:47'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 17:46:47'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 17:46:47'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 17:46:47'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 17:46:47'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 17:46:47'!
PASSED!
!Hotel methodsFor: 'initialization' stamp: 'fb 4/29/2024 17:47:05' prior: 50534175!
initializeWithFloors: aFloorsCollection

	availableRoomsCount := 0.

	self class assertHaveFloors: aFloorsCollection.

	floors := aFloorsCollection.
	
	availableRoomsCount := self totalRooms.! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 17:47:06'!
PASSED!

!methodRemoval: Hotel #initialize stamp: 'fb 4/29/2024 17:47:10'!
initialize

	availableRoomsCount := 0.
!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 17:47:13'!
PASSED!

----SNAPSHOT----(29 April 2024 17:50:58) CuisUniversity-6169.image priorSource: 6475169!

Room subclass: #Available
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Available category: #'ISW1-2024-1C-Parcial' stamp: 'fb 4/29/2024 17:53:35'!
Room subclass: #Available
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

Room subclass: #Reserved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Reserved category: #'ISW1-2024-1C-Parcial' stamp: 'fb 4/29/2024 17:53:41'!
Room subclass: #Reserved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

Room subclass: #Occupied
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Occupied category: #'ISW1-2024-1C-Parcial' stamp: 'fb 4/29/2024 17:53:45'!
Room subclass: #Occupied
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

----SNAPSHOT----(29 April 2024 17:54:40) CuisUniversity-6169.image priorSource: 6494814!

!methodRemoval: Room #guestType stamp: 'fb 4/29/2024 17:54:44'!
guestType

	^ guest!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 17:54:47'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 17:54:47'!
PASSED!
!Available methodsFor: 'testing' stamp: 'fb 4/29/2024 17:54:59' overrides: 50532881!
isAvailable

	^ guest isNil! !
!Reserved methodsFor: 'testing' stamp: 'fb 4/29/2024 17:54:59' overrides: 50532881!
isAvailable

	^ guest isNil! !
!Occupied methodsFor: 'testing' stamp: 'fb 4/29/2024 17:54:59' overrides: 50532881!
isAvailable

	^ guest isNil! !
!Room methodsFor: 'testing' stamp: 'fb 4/29/2024 17:54:59' prior: 50532881!
isAvailable

	self subclassResponsibility! !
!Available methodsFor: 'testing' stamp: 'fb 4/29/2024 17:55:06' prior: 50534712 overrides: 50534724!
isAvailable

	^ True! !
!Occupied methodsFor: 'testing' stamp: 'fb 4/29/2024 17:55:12' prior: 50534720 overrides: 50534724!
isAvailable

	^ false! !
!Available methodsFor: 'testing' stamp: 'fb 4/29/2024 17:55:16' prior: 50534729 overrides: 50534724!
isAvailable

	^ false! !
!Reserved methodsFor: 'testing' stamp: 'fb 4/29/2024 17:55:25' prior: 50534716 overrides: 50534724!
isAvailable

	^ false! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 17:55:29'!
ERROR!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:55:29'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 17:55:29'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 17:55:29'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 17:55:29'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:55:29'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 17:55:29'!
ERROR!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 17:55:29'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 17:55:29'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 17:55:29'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 17:55:29'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 17:55:29'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 17:55:29'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:55:29'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:55:29'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 17:55:29'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 17:55:29'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 17:55:53'!
ERROR!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:55:53'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 17:55:53'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 17:55:53'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 17:55:53'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:55:53'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 17:55:53'!
ERROR!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 17:55:53'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 17:55:53'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 17:55:53'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 17:55:53'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 17:55:53'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 17:55:53'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:55:53'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:55:53'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 17:55:53'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 17:55:53'!
PASSED!
!Room methodsFor: 'testing' stamp: 'fb 4/29/2024 17:56:27' prior: 50534724!
isAvailable

	^ false! !

!methodRemoval: Available #isAvailable stamp: 'fb 4/29/2024 17:56:27'!
isAvailable

	^ false!

!methodRemoval: Reserved #isAvailable stamp: 'fb 4/29/2024 17:56:27'!
isAvailable

	^ false!

!methodRemoval: Occupied #isAvailable stamp: 'fb 4/29/2024 17:56:27'!
isAvailable

	^ false!
!Room methodsFor: 'testing' stamp: 'fb 4/29/2024 17:56:43' prior: 50534855!
isAvailable

	^ guest isNil ! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 17:56:44'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 17:56:46'!
PASSED!

!classRemoval: #Available stamp: 'fb 4/29/2024 17:56:50'!
Room subclass: #Available
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classRemoval: #Occupied stamp: 'fb 4/29/2024 17:56:51'!
Room subclass: #Occupied
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classRemoval: #Reserved stamp: 'fb 4/29/2024 17:56:53'!
Room subclass: #Reserved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

Object subclass: #RoomState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #RoomState category: #'ISW1-2024-1C-Parcial' stamp: 'fb 4/29/2024 17:56:59'!
Object subclass: #RoomState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

RoomState subclass: #Available
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Available category: #'ISW1-2024-1C-Parcial' stamp: 'fb 4/29/2024 17:57:07'!
RoomState subclass: #Available
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

RoomState subclass: #Occupied
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Occupied category: #'ISW1-2024-1C-Parcial' stamp: 'fb 4/29/2024 17:57:11'!
RoomState subclass: #Occupied
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

RoomState subclass: #Reserved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Reserved category: #'ISW1-2024-1C-Parcial' stamp: 'fb 4/29/2024 17:57:14'!
RoomState subclass: #Reserved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

Object subclass: #Room
	instanceVariableNames: 'roomState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Room category: #'ISW1-2024-1C-Parcial' stamp: 'fb 4/29/2024 17:57:26'!
Object subclass: #Room
	instanceVariableNames: 'roomState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 17:57:35' overrides: 16932297!
initialize

	! !

Object subclass: #Room
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Room category: #'ISW1-2024-1C-Parcial' stamp: 'fb 4/29/2024 17:57:52'!
Object subclass: #Room
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 17:58:01' prior: 50535058 overrides: 16932297!
initialize

	state := Available! !
!Room methodsFor: 'testing' stamp: 'fb 4/29/2024 17:58:37' prior: 50534867!
isAvailable

	^ state isAvailable ! !
!Room methodsFor: 'testing' stamp: 'fb 4/29/2024 17:59:01' prior: 50532884!
isOccupied

	^ state isOccupied
! !
!Room methodsFor: 'testing' stamp: 'fb 4/29/2024 17:59:09' prior: 50532888!
isReserved

	^ state isReserved! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 17:59:11'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 17:59:11'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:59:11'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 17:59:11'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 17:59:11'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 17:59:13'!
ERROR!
!Available methodsFor: 'no messages' stamp: 'fb 4/29/2024 17:59:32'!
isAvailable 

	^true! !
!Occupied methodsFor: 'no messages' stamp: 'fb 4/29/2024 17:59:40'!
isAvailable 

	^false! !
!Reserved methodsFor: 'no messages' stamp: 'fb 4/29/2024 17:59:47'!
isAvailable 

	^false! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:00:04'!
isOccupied

	^false! !
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:00:12'!
isOccupied

	^true! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:00:31'!
isOccupied

	^false! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:00:45'!
isReserved

	^false! !
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:00:56'!
isReserved

	^false! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:01:00'!
isReserved
	^false! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:01:00' prior: 50535177!
isReserved

	^false! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:01:05'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:01:05'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:01:05'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:01:05'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:01:05'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:01:08'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:01:39'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'fb 4/29/2024 18:02:00' prior: 50535073 overrides: 16932297!
initialize

	state := Available new! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:02:01'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:02:01'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:02:01'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:02:01'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:02:01'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:02:01'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:02:01'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:02:01'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:02:01'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:02:01'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:02:01'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:02:01'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:02:01'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:02:01'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:02:01'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:02:01'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:02:01'!
ERROR!

Object subclass: #Room
	instanceVariableNames: 'state guest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Room category: #'ISW1-2024-1C-Parcial' stamp: 'fb 4/29/2024 18:03:42'!
Object subclass: #Room
	instanceVariableNames: 'state guest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!
!Room methodsFor: 'initialization' stamp: 'fb 4/29/2024 18:04:57' prior: 50535246 overrides: 16932297!
initialize

	state := Available new.
	guest := #noGuest.! !
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:06:34' prior: 50532857!
receive: aGuestType

	"state receiveGuest: aGuestType inRoom: self"

	"Room Occupied"
	(guest notNil or: [guest = #reserved])
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  guest := aGuestType ] ! !
!RoomState methodsFor: 'no messages' stamp: 'fb 4/29/2024 18:06:56'!
receiveGuest: aGuestType inRoom: aRoom! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:07:09' overrides: 50535333!
receiveGuest: aGuestType inRoom: aRoom! !
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:07:09' overrides: 50535333!
receiveGuest: aGuestType inRoom: aRoom! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:07:09' overrides: 50535333!
receiveGuest: aGuestType inRoom: aRoom! !
!RoomState methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:07:09' prior: 50535333!
receiveGuest: aGuestType inRoom: aRoom

	self subclassResponsibility! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:08:20'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:08:20'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:08:20'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:08:20'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:08:20'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:08:20'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:08:20'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:08:20'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:08:20'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:08:20'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:08:20'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:08:20'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:08:20'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:08:20'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:08:20'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:08:20'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:08:20'!
ERROR!
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:08:53'!
receiveGuest: aGuestType

	^ guest := aGuestType! !
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:08:53' prior: 50535323!
receive: aGuestType

	"state receiveGuest: aGuestType inRoom: self"

	"Room Occupied"
	(guest notNil or: [guest = #reserved])
		ifTrue: [ self error: self class roomIsNotEmptyErrorDescription ]
		ifFalse: [  self receiveGuest: aGuestType ] ! !
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:08:53' prior: 50532865!
receiveWithReservation: aGuestType
	
	"Room Reserved"
	guest = #reserved
		ifTrue: [  self receiveGuest: aGuestType ] 
		ifFalse: [ self error: self class roomIsNotReservedErrorDescription ]
! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:09:07' prior: 50535338 overrides: 50535353!
receiveGuest: aGuestType inRoom: aRoom

	aRoom receiveGuest: aGuestType ! !
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:09:39' prior: 50535343 overrides: 50535353!
receiveGuest: aGuestType inRoom: aRoom

 	! !
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:10:03'!
raiseErrorRoomIsNotEmpty

	^ self error: self class roomIsNotEmptyErrorDescription! !
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:10:03' prior: 50535417!
receive: aGuestType

	"state receiveGuest: aGuestType inRoom: self"

	"Room Occupied"
	(guest notNil or: [guest = #reserved])
		ifTrue: [ self raiseErrorRoomIsNotEmpty ]
		ifFalse: [  self receiveGuest: aGuestType ] ! !
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:10:03' prior: 50532873!
reserve

	"Room Occupied"
	(guest notNil or: [guest = #reserved]) 
		ifTrue: [ self raiseErrorRoomIsNotEmpty ]
		ifFalse: [  	guest := #reserved ]! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:10:05'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:10:05'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:10:05'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:10:05'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:10:05'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:10:05'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:10:05'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:10:05'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:10:05'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:10:05'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:10:05'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:10:05'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:10:05'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:10:05'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:10:05'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:10:05'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:10:05'!
ERROR!
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:10:33' prior: 50535443 overrides: 50535353!
receiveGuest: aGuestType inRoom: aRoom

 	aRoom raiseErrorRoomIsNotEmpty ! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:10:41' prior: 50535348 overrides: 50535353!
receiveGuest: aGuestType inRoom: aRoom

	 aRoom raiseErrorRoomIsNotEmpty ! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:10:44'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:10:44'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:10:44'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:10:44'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:10:44'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:10:44'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:10:44'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:10:44'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:10:44'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:10:44'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:10:44'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:10:44'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:10:44'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:10:44'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:10:44'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:10:44'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:10:44'!
ERROR!
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:11:27' prior: 50535413!
receiveGuest: aGuestType

	state := Occupied new.
	^ guest := aGuestType! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:11:28'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:11:28'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:11:28'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:11:28'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:11:28'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:11:28'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:11:28'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:11:28'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:11:28'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:11:28'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:11:28'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:11:28'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:11:28'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:11:28'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:11:28'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:11:28'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:11:28'!
ERROR!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:11:31'!
ERROR!
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:12:16' prior: 50535453!
receive: aGuestType

	state receiveGuest: aGuestType inRoom: self

	""Room Occupied"
	(guest notNil or: [guest = #reserved])
		ifTrue: [ self raiseErrorRoomIsNotEmpty ]
		ifFalse: [  self receiveGuest: aGuestType ] "! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:12:16'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:12:16'!
ERROR!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:12:16'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:12:16'!
ERROR!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:12:16'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:12:16'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:12:16'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:12:16'!
ERROR!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:12:16'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:12:16'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:12:16'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:12:16'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:12:16'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:12:16'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:12:16'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:12:16'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:12:16'!
ERROR!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:12:42'!
ERROR!
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:12:57' prior: 50535657!
receive: aGuestType

	state receiveGuest: aGuestType inRoom: self.

! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:12:58'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:12:58'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:12:58'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:12:58'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:12:58'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:12:58'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:12:58'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:12:58'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:12:58'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:12:58'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:12:58'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:12:58'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:12:58'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:12:58'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:12:58'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:12:58'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:12:58'!
PASSED!
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:13:53'!
reserveRoom

	^ guest := #reserved! !
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:13:53' prior: 50535463!
reserve

	"Room Occupied"
	(guest notNil or: [guest = #reserved]) 
		ifTrue: [ self raiseErrorRoomIsNotEmpty ]
		ifFalse: [  	self reserveRoom ]! !
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:14:28' prior: 50535789!
reserve

	state reserveRoom: self.

	"Room Occupied"
	(guest notNil or: [guest = #reserved]) 
		ifTrue: [ self raiseErrorRoomIsNotEmpty ]
		ifFalse: [  	self reserveRoom ]! !
!RoomState methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:14:42'!
reserveRoom: aRoom! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:14:45' overrides: 50535804!
reserveRoom: aRoom! !
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:14:45' overrides: 50535804!
reserveRoom: aRoom! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:14:45' overrides: 50535804!
reserveRoom: aRoom! !
!RoomState methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:14:45' prior: 50535804!
reserveRoom: aRoom

	self subclassResponsibility! !
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:15:04' prior: 50535812 overrides: 50535820!
reserveRoom: aRoom

	aRoom raiseErrorRoomIsNotEmpty.! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:15:14' prior: 50535816 overrides: 50535820!
reserveRoom: aRoom

	^aRoom raiseErrorRoomIsNotEmpty ! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:15:21' prior: 50535832 overrides: 50535820!
reserveRoom: aRoom

	aRoom raiseErrorRoomIsNotEmpty ! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:15:41' prior: 50535808 overrides: 50535820!
reserveRoom: aRoom

	aRoom reserveRoom! !
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:15:54' prior: 50535785!
reserveRoom

	^ state := Reserved new.! !

----SNAPSHOT----(29 April 2024 18:16:01) CuisUniversity-6169.image priorSource: 6495993!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:16:04'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:16:04'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:16:04'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:16:04'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:16:04'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:16:04'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:16:04'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:16:04'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:16:04'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:16:04'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:16:04'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:16:04'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:16:04'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:16:04'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:16:04'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:16:04'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:16:04'!
PASSED!
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:16:15' prior: 50535165!
isOccupied

	^true! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:16:17'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:16:17'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:16:17'!
ERROR!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:16:17'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:16:17'!
ERROR!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:16:17'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:16:17'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:16:17'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:16:17'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:16:17'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:16:17'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:16:17'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:16:17'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:16:17'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:16:17'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:16:17'!
ERROR!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:16:17'!
PASSED!
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:16:44' prior: 50535796!
reserve

	state reserveRoom: self.
! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:17:01'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:17:01'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:17:01'!
FAILURE!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:17:01'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:17:01'!
FAILURE!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:17:01'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:17:01'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:17:01'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:17:01'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:17:01'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:17:01'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:17:01'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:17:01'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:17:01'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:17:01'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:17:01'!
FAILURE!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:17:01'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:17:31'!
FAILURE!
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:17:52' prior: 50535181!
isReserved

	^true! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:17:55'!
ERROR!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:17:55'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:17:55'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:17:55'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:17:55'!
PASSED!
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:18:45' prior: 50535427!
receiveWithReservation: aGuestType
	
	"Room Reserved"
	(state isKindOf: Reserved)
		ifTrue: [  self receiveGuest: aGuestType ] 
		ifFalse: [ self error: self class roomIsNotReservedErrorDescription ]
! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:18:46'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:18:46'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:18:46'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:18:46'!
PASSED!
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:19:07'!
raiseErrorRoomNotReserved

	^ self error: self class roomIsNotReservedErrorDescription! !
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:19:07' prior: 50536093!
receiveWithReservation: aGuestType
	
	"Room Reserved"
	(state isKindOf: Reserved)
		ifTrue: [  self receiveGuest: aGuestType ] 
		ifFalse: [ self raiseErrorRoomNotReserved ]
! !
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:19:54' prior: 50536163!
receiveWithReservation: aGuestType

	state receiveGuestWithReservation: aGuestType in: self.
	
	"Room Reserved"
	(state isKindOf: Reserved)
		ifTrue: [  self receiveGuest: aGuestType ] 
		ifFalse: [ self raiseErrorRoomNotReserved ]
! !
!RoomState methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:20:08'!
receiveGuestWithReservation: aGuestType in: aRoom

	! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:20:12' overrides: 50536181!
receiveGuestWithReservation: aGuestType in: aRoom

	! !
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:20:12' overrides: 50536181!
receiveGuestWithReservation: aGuestType in: aRoom

	! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:20:12' overrides: 50536181!
receiveGuestWithReservation: aGuestType in: aRoom

	! !
!RoomState methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:20:12' prior: 50536181!
receiveGuestWithReservation: aGuestType in: aRoom

	self subclassResponsibility! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:20:40' prior: 50536186 overrides: 50536201!
receiveGuestWithReservation: aGuestType in: aRoom

	aRoom raiseErrorRoomNotReserved! !
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:20:50' prior: 50536191 overrides: 50536201!
receiveGuestWithReservation: aGuestType in: aRoom

	aRoom raiseErrorRoomNotReserved! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:21:25' prior: 50536196 overrides: 50536201!
receiveGuestWithReservation: aGuestType in: aRoom

	aRoom receiveGuest: aGuestType ! !
!Room methodsFor: 'guests' stamp: 'fb 4/29/2024 18:21:36' prior: 50536171!
receiveWithReservation: aGuestType

	state receiveGuestWithReservation: aGuestType in: self.
	
! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:21:36'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:21:36'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:21:36'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:21:36'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 18:22:20' prior: 50532892!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ 0*peso ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ aPriceList values min / 2 ].
	
	"Room Occupied"
	(guest notNil or: [guest = #reserved]) ifTrue: [ ^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock ].
	
	! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 18:22:46' prior: 50536290!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ 0*peso ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ aPriceList values min / 2 ].
	
	"Room Occupied"
	(guest notNil or: [guest = #reserved]) ifTrue: [ ^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock ].
	
	! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 18:23:13' prior: 50536304!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ 0*peso ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ aPriceList values min / 2 ].
	
	"Room Occupied"
	((state isKindOf: Reserved) or: [(state isKindOf: Occupied)]) ifTrue: [ ^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock ].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 18:23:14'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 18:23:14'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 18:25:40' prior: 50536318!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ 0*peso ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ aPriceList values min / 2 ].
	
	"Room Occupied"
	((state isKindOf: Reserved) or: [(state isKindOf: Occupied)]) ifTrue: [ ^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock ].
	
	! !

----SNAPSHOT----(29 April 2024 18:26:41) CuisUniversity-6169.image priorSource: 6534441!
!Floor methodsFor: 'nil' stamp: 'fb 4/29/2024 18:35:18'!
isEmpty

	| jx  acc |

	[ jx <= self rooms size ] whileTrue: [ | room |
		room := self rooms at: jx.
		acc := acc and: room isAvailable.
		
		jx := jx + 1.
	].! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:35:36' prior: 50536405!
isEmpty

	| jx  acc |
	
	jx := 1.
	acc := False.

	[ jx <= self rooms size ] whileTrue: [ | room |
		room := self rooms at: jx.
		acc := acc and: room isAvailable.
		
		jx := jx + 1.
	].! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:35:39' prior: 50536413!
isEmpty

	| jx  acc |
	
	jx := 1.
	acc := false.

	[ jx <= self rooms size ] whileTrue: [ | room |
		room := self rooms at: jx.
		acc := acc and: room isAvailable.
		
		jx := jx + 1.
	].! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:35:57' prior: 50536422!
isEmpty

	| jx  acc |
	
	jx := 1.
	acc := true.

	[ jx <= self rooms size ] whileTrue: [ | room |
		room := self rooms at: jx.
		acc := acc and: room isAvailable.
		
		jx := jx + 1.
	].! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:36:03' prior: 50536431!
isEmpty

	| jx  acc |
	
	jx := 1.
	acc := true.

	[ jx <= self rooms size ] whileTrue: [ | room |
		room := self rooms at: jx.
		acc := acc and: room isAvailable.
		
		jx := jx + 1.
	].
	
	^acc.! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:36:35' prior: 50536440!
isEmpty

	
	
	| jx  acc |
	
	jx := 1.
	acc := true.

	[ jx <= self rooms size ] whileTrue: [ | room |
		room := self rooms at: jx.
		acc := acc and: room isAvailable.
		
		jx := jx + 1.
	].
	
	^acc.! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:37:35' prior: 50536449!
isEmpty

	| jx  acc |
	
	acc := rooms inject: true  into: [:empty :room | ]. 
	
	jx := 1.
	acc := true.

	[ jx <= self rooms size ] whileTrue: [ | room |
		room := self rooms at: jx.
		acc := acc and: room isAvailable.
		
		jx := jx + 1.
	].
	
	^acc.! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:37:52' prior: 50536459!
isEmpty

	| jx  acc |
	
	acc := rooms inject: true  into: [:empty :room | empty & (room isAvailable)]. 
	
	jx := 1.
	acc := true.

	[ jx <= self rooms size ] whileTrue: [ | room |
		room := self rooms at: jx.
		acc := acc and: room isAvailable.
		
		jx := jx + 1.
	].
	
	^acc.! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:37:57' prior: 50536470!
isEmpty

	| jx  acc |
	
	"acc := rooms inject: true  into: [:empty :room | empty & (room isAvailable)]. "
	
	jx := 1.
	acc := true.

	[ jx <= self rooms size ] whileTrue: [ | room |
		room := self rooms at: jx.
		acc := acc and: room isAvailable.
		
		jx := jx + 1.
	].
	
	^acc.! !
!Hotel methodsFor: 'testing' stamp: 'fb 4/29/2024 18:38:52' prior: 50532747!
isEmpty

	| ix acc |
	
	acc := true.

	ix := 1.	
	[ ix <= floors size ] whileTrue: [ | floor |
		floor := floors at: ix.

		acc := acc and: floor isEmpty.
	
			
		ix := ix + 1.				
	].

	^ acc.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:38:56'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:38:56'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:38:56'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:38:56'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:38:56'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:38:56'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:38:56'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:38:56'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:38:56'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:38:56'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:38:56'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:38:56'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:38:56'!
PASSED!
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:39:23' prior: 50536482!
isEmpty

	| jx  acc |
	
	acc := rooms inject: true  into: [:empty :room | empty & (room isAvailable)]. 

"	
	jx := 1.
	acc := true.

	[ jx <= self rooms size ] whileTrue: [ | room |
		room := self rooms at: jx.
		acc := acc and: room isAvailable.
		
		jx := jx + 1.
	].
	"
	^acc.! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:39:27'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:39:27'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:39:27'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:39:27'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:39:27'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:39:27'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:39:27'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:39:27'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:39:27'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:39:27'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:39:27'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:39:27'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:39:27'!
PASSED!
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:39:51' prior: 50536548!
isEmpty

	| acc |
	
	acc := rooms inject: true  into: [:empty :room | empty & (room isAvailable)]. 

	^acc.! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 18:39:52'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 18:39:52'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 18:39:52'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 18:39:52'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 18:39:52'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 18:39:52'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 18:39:52'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 18:39:52'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 18:39:52'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 18:39:54'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 18:39:54'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 18:39:54'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 18:39:54'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 18:39:54'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 18:39:54'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 18:39:54'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 18:39:54'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 18:39:54'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:39:56'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:39:56'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:39:56'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:39:56'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:39:56'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:39:56'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:39:56'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:39:56'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:39:56'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:39:56'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:39:56'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:39:56'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:39:56'!
PASSED!
!Hotel methodsFor: 'testing' stamp: 'fb 4/29/2024 18:40:38' prior: 50536494!
isEmpty

	| ix acc |
	
	acc := floors inject: true  into: [:empty :floor | empty & (floor isAvailable)]. 

	
	acc := true.

	ix := 1.	
	[ ix <= floors size ] whileTrue: [ | floor |
		floor := floors at: ix.

		acc := acc and: floor isEmpty.
	
			
		ix := ix + 1.				
	].

	^ acc.
! !
!Hotel methodsFor: 'testing' stamp: 'fb 4/29/2024 18:40:42' prior: 50536726!
isEmpty

	| ix acc |
	
	acc := floors inject: true  into: [:empty :floor | empty & (floor isAvailable)]. 

	"
	acc := true.

	ix := 1.	
	[ ix <= floors size ] whileTrue: [ | floor |
		floor := floors at: ix.

		acc := acc and: floor isEmpty.
	
			
		ix := ix + 1.				
	].
"
	^ acc.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:40:45'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:40:45'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:40:45'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:40:45'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:40:45'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:40:45'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:40:45'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:40:45'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:40:45'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:40:45'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:40:45'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:40:45'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:40:45'!
PASSED!
!Hotel methodsFor: 'testing' stamp: 'fb 4/29/2024 18:40:53' prior: 50536738!
isEmpty

	| acc |
	
	acc := floors inject: true  into: [:empty :floor | empty & (floor isAvailable)]. 

	^ acc.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:40:56'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:40:56'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:40:56'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:40:56'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:40:56'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:40:56'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:40:56'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:40:56'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:40:56'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:40:56'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:40:56'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:40:56'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:40:56'!
PASSED!
!Hotel methodsFor: 'testing' stamp: 'fb 4/29/2024 18:41:01' prior: 50536794!
isEmpty

	| acc |
	
	^floors inject: true  into: [:empty :floor | empty & (floor isAvailable)]. 


! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:41:03'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:41:03'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:41:03'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:41:03'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:41:03'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:41:03'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:41:03'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:41:03'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:41:03'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:41:03'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:41:03'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:41:03'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:41:03'!
PASSED!
!Hotel methodsFor: 'testing' stamp: 'fb 4/29/2024 18:41:07' prior: 50536845!
isEmpty
	
	^floors inject: true  into: [:empty :floor | empty & (floor isAvailable)]. 


! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:41:07'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:41:09'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:41:09'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:41:09'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:41:09'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:41:09'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:41:09'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:41:09'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:41:09'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:41:09'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:41:09'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:41:09'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:41:09'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:41:09'!
PASSED!
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:41:44' prior: 50536604!
isEmpty
	
	^rooms inject: true  into: [:empty :room | empty & (room isAvailable)]. 

! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 18:41:45'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 18:41:45'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 18:41:45'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 18:41:45'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 18:41:45'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 18:41:45'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 18:41:45'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 18:41:45'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 18:41:45'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:41:48'!
PASSED!

----SNAPSHOT----(29 April 2024 18:45:06) CuisUniversity-6169.image priorSource: 6552058!
!Floor methodsFor: 'nil' stamp: 'fb 4/29/2024 18:46:01'!
roomAt: aPosition! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:46:14' prior: 50537078!
roomAt: aRoomNumber! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:47:17' prior: 50537082!
roomAt: aRoomNumber

	rooms at: aRoomNumber ifAbsent: [ self class signalRoomNumberDoesNotExist] ! !
!Floor class methodsFor: 'instanciation' stamp: 'fb 4/29/2024 18:47:48'!
signalRoomNumberDoesNotExist

	self error: self roomNumberDoesNotExistErrorDescription.! !
!Floor class methodsFor: 'instanciation' stamp: 'fb 4/29/2024 18:48:05'!
roomNumberDoesNotExistErrorDescription

	^ 'Room number does not exist'.! !
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 18:48:30' prior: 50532759!
receive: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor roomAt: aRoomNumber.

	room receive: aGuestType.
	
	availableRoomsCount := availableRoomsCount - 1.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:48:31'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:48:31'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:48:31'!
ERROR!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:48:31'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:48:31'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:48:31'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:48:31'!
ERROR!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:48:31'!
ERROR!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:48:31'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:48:31'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:48:31'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:48:31'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:48:31'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:48:34'!
ERROR!
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 18:48:53' prior: 50537086!
roomAt: aRoomNumber

	^rooms at: aRoomNumber ifAbsent: [ self class signalRoomNumberDoesNotExist] .! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:48:55'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:48:55'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:48:55'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:48:55'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:48:55'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:48:55'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:48:55'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:48:55'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:48:55'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:48:55'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:48:55'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:48:55'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:48:55'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 18:49:32' prior: 50532772!
receiveWithReservation: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor roomAt: aRoomNumber .

	room receiveWithReservation: aGuestType.

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:49:34'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:49:34'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:49:34'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:49:34'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:49:34'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:49:34'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:49:34'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:49:34'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:49:34'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:49:34'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:49:34'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:49:34'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:49:34'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 18:49:46' prior: 50532785!
reserveRoom: aRoomNumber atFloor: aFloorNumber

	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor roomAt: aRoomNumber.
	 
	room reserve.
	
	availableRoomsCount := availableRoomsCount - 1.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:49:47'!
PASSED!

!methodRemoval: Hotel class #signalRoomNumberDoesNotExist stamp: 'fb 4/29/2024 18:50:26'!
signalRoomNumberDoesNotExist

	self error: self roomNumberDoesNotExistErrorDescription.!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:50:27'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:50:27'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:50:27'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:50:27'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:50:27'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:50:27'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:50:27'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:50:27'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:50:27'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:50:27'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:50:27'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:50:27'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:50:27'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'fb 4/29/2024 18:51:00' prior: 50534206!
test09HotelCannotReserveANonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self createFloorWith: 10 and: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new initializeWithFloors: floors.
	
	self 
	should: [ 	hotel reserveRoom: 42 atFloor: 1. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Floor roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]
! !

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:51:01'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:51:01'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'fb 4/29/2024 18:51:05' prior: 50534258!
test11HotelCannotReceiveAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self createFloorWith: 10 and: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new initializeWithFloors: floors.
	
	self 
	should: [ 	hotel receive: self guestTypeVacation atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Floor roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms equals: hotel totalRoomsAvailable.
		self assert: 0 equals: hotel totalRoomsReserved.
		self assert: 0 equals: hotel totalRoomsOccupied.
	]! !

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:51:06'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:51:06'!
PASSED!
!HotelTest methodsFor: 'testing' stamp: 'fb 4/29/2024 18:51:10' prior: 50534282!
test13HotelCannotReceiveWithReservationAtNonexistentRoom
	
	| hotel floor1 floors |
	
	floor1 := self createFloorWith: 10 and: self defaultPriceList.

	floors := OrderedCollection with: floor1.
	hotel := 	Hotel new initializeWithFloors: floors.

	hotel reserveRoom: 1 atFloor: 1. 
	
	self 
	should: [ 	hotel receiveWithReservation: self guestTypeVacation atFloor: 1 atRoom: 42. ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [		:error |	
		self assert: Floor roomNumberDoesNotExistErrorDescription equals: error messageText.
		
		self assert: hotel	 totalRooms - 1 equals: hotel totalRoomsAvailable.
		self assert: 1 equals: hotel totalRoomsReserved.
		self assert: 1 equals: hotel totalRoomsOccupied.
	]! !

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:51:11'!
PASSED!

!methodRemoval: Hotel class #roomNumberDoesNotExistErrorDescription stamp: 'fb 4/29/2024 18:51:23'!
roomNumberDoesNotExistErrorDescription

	^ 'Room number does not exist'.!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:51:25'!
PASSED!

----SNAPSHOT----(29 April 2024 18:51:35) CuisUniversity-6169.image priorSource: 6573592!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 18:55:18' prior: 50532721!
totalRoomsOccupied

	| ix acc |

	acc := 0.

	ix := 1.	
	[ ix <= floors size ] whileTrue: [ | floor jx |
		floor := floors at: ix.
		acc := acc + floor  totalRoomsOccupied. 
		
		"
		jx := 1.
		[ jx <= floor rooms size ] whileTrue: [ | room | 
			room := floor rooms at: jx.
			room isOccupied ifTrue: [ 			acc := acc + 1. ].
			
			jx := jx + 1.
		].
		"
		ix := ix + 1.				
	].

	^ acc.

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:55:21'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:55:21'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:55:21'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:55:21'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:55:21'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:55:21'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:55:21'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:55:21'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:55:21'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:55:21'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:55:21'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:55:21'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:55:21'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 18:55:27' prior: 50537641!
totalRoomsOccupied

	| ix acc |

	acc := 0.

	ix := 1.	
	[ ix <= floors size ] whileTrue: [ | floor jx |
		floor := floors at: ix.
		acc := acc + floor  totalRoomsOccupied. 
		ix := ix + 1.				
	].

	^ acc.

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:55:30'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:55:30'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:55:31'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:55:31'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:55:31'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:55:31'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:55:31'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:55:31'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:55:31'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:55:31'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:55:31'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:55:31'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:55:31'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 18:55:43' prior: 50532734!
totalRoomsReserved

	| ix acc |

	acc := 0.

	ix := 1.	
	[ ix <= floors size ] whileTrue: [ | floor jx |
		floor := floors at: ix.

		acc := acc + floor  totalRoomsOccupied. 
		ix := ix + 1.				
	].

	^ acc.

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:55:44'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:55:44'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:55:44'!
FAILURE!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:55:44'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:55:44'!
FAILURE!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:55:44'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:55:44'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:55:44'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:55:44'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:55:44'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:55:44'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:55:44'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:55:44'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 18:55:51' prior: 50537754!
totalRoomsReserved

	| ix acc |

	acc := 0.

	ix := 1.	
	[ ix <= floors size ] whileTrue: [ | floor jx |
		floor := floors at: ix.

		acc := acc + floor  totalRoomsReserved. 
		ix := ix + 1.				
	].

	^ acc.

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:55:55'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:55:55'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:55:55'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:55:55'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:55:55'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:55:55'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:55:55'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:55:55'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:55:55'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:55:55'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:55:55'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:55:55'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:55:55'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 18:57:47' prior: 50537700!
totalRoomsOccupied

	| ix acc |

	acc := 0.
	
	floors inject: 0 into: [:subTotal :next | subTotal +  next floor totalRoomsOccupied].

	ix := 1.	
	[ ix <= floors size ] whileTrue: [ | floor jx |
		floor := floors at: ix.
		acc := acc + floor  totalRoomsOccupied. 
		ix := ix + 1.				
	].

	^ acc.

! !
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 18:58:00' prior: 50537862!
totalRoomsOccupied

	| ix acc |

	acc := 0.
	
	^floors inject: 0 into: [:subTotal :next | subTotal +  next floor totalRoomsOccupied].
	"
	ix := 1.	
	[ ix <= floors size ] whileTrue: [ | floor jx |
		floor := floors at: ix.
		acc := acc + floor  totalRoomsOccupied. 
		ix := ix + 1.				
	].
^ acc.
"
	

! !

----SNAPSHOT----(29 April 2024 18:58:13) CuisUniversity-6169.image priorSource: 6591589!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:58:16'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:58:16'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:58:16'!
ERROR!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:58:16'!
ERROR!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:58:16'!
ERROR!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:58:16'!
ERROR!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:58:16'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:58:16'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:58:16'!
ERROR!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:58:16'!
ERROR!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:58:16'!
ERROR!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:58:16'!
ERROR!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:58:16'!
ERROR!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 18:58:50' prior: 50537874!
totalRoomsOccupied

	| ix acc |

	acc := 0.
	
	^floors inject: 0 into: [:subTotal :next | subTotal +  next totalRoomsOccupied].
	"
	ix := 1.	
	[ ix <= floors size ] whileTrue: [ | floor jx |
		floor := floors at: ix.
		acc := acc + floor  totalRoomsOccupied. 
		ix := ix + 1.				
	].
^ acc.
"
	

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:58:53'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:58:53'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:58:53'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:58:53'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:58:53'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:58:53'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:58:53'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:58:53'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:58:53'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:58:53'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:58:53'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:58:53'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:58:53'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 18:59:00' prior: 50537933!
totalRoomsOccupied

	^floors inject: 0 into: [:subTotal :next | subTotal +  next totalRoomsOccupied].

	

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:59:01'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:59:01'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:59:01'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:59:01'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:59:01'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:59:01'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:59:01'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:59:01'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:59:01'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:59:01'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:59:01'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:59:01'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:59:01'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 18:59:24' prior: 50537808!
totalRoomsReserved

	^floors inject: 0 into: [:subTotal :next | subTotal +  next totalRoomsReserved].

	"| ix acc |

	acc := 0.

	ix := 1.	
	[ ix <= floors size ] whileTrue: [ | floor jx |
		floor := floors at: ix.

		acc := acc + floor  totalRoomsReserved. 
		ix := ix + 1.				
	].

	^ acc.

"! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:59:25'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:59:25'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:59:25'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:59:25'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:59:25'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:59:25'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:59:25'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:59:25'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:59:25'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:59:25'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:59:25'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:59:25'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:59:25'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 18:59:28' prior: 50538040!
totalRoomsReserved

	^floors inject: 0 into: [:subTotal :next | subTotal +  next totalRoomsReserved].
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 18:59:29'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 19:00:15'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 19:00:15'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 19:00:15'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 19:00:15'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 19:00:15'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 19:00:15'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 19:00:15'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 19:00:15'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 19:00:15'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 19:00:15'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 19:00:15'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 19:00:15'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 19:00:15'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 19:00:52' prior: 50532706!
totalRooms

	| ix acc |
	
	^floors inject: 0 into: [:subTotal :next | subTotal +  next totalRooms].
"
	acc := 0.

	ix := 1.	
	[ ix <= floors size ] whileTrue: [ | floor jx |
		floor := floors at: ix.

		jx := 1.
		[ jx <= floor rooms size ] whileTrue: [ 
			acc := acc + 1.
			
			jx := jx + 1.
		].
			
		ix := ix + 1.				
	].

	^ acc."

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 19:00:55'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 19:00:55'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 19:00:55'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 19:00:55'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 19:00:55'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 19:00:55'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 19:00:55'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 19:00:55'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 19:00:55'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 19:00:55'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 19:00:55'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 19:00:55'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 19:00:55'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 19:01:01' prior: 50538191!
totalRooms
	
	^floors inject: 0 into: [:subTotal :next | subTotal +  next totalRooms].

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 19:01:01'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 19:01:01'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 19:01:01'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 19:01:01'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 19:01:01'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 19:01:01'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 19:01:01'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 19:01:01'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 19:01:01'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 19:01:01'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 19:01:01'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 19:01:01'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 19:01:01'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 19:01:35' prior: 50537989!
totalRoomsOccupied

	^floors sum: [:subTotal :next | subTotal +  next totalRoomsOccupied].

	

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 19:01:35'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 19:01:35'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 19:01:35'!
ERROR!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 19:01:35'!
ERROR!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 19:01:35'!
ERROR!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 19:01:35'!
ERROR!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 19:01:35'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 19:01:35'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 19:01:35'!
ERROR!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 19:01:35'!
ERROR!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 19:01:35'!
ERROR!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 19:01:35'!
ERROR!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 19:01:35'!
ERROR!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 19:01:39'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 19:01:39'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 19:01:39'!
ERROR!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 19:01:39'!
ERROR!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 19:01:39'!
ERROR!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 19:01:39'!
ERROR!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 19:01:39'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 19:01:39'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 19:01:39'!
ERROR!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 19:01:39'!
ERROR!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 19:01:39'!
ERROR!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 19:01:39'!
ERROR!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 19:01:39'!
ERROR!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 18:59:00' prior: 50538299!
totalRoomsOccupied

	^floors inject: 0 into: [:subTotal :next | subTotal +  next totalRoomsOccupied].

	

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 19:01:54'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 19:01:54'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 19:01:54'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 19:01:54'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 19:01:54'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 19:01:54'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 19:01:54'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 19:01:54'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 19:01:54'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 19:01:54'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 19:01:54'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 19:01:54'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 19:01:54'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:08:46' prior: 50536388!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ 0*peso ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ aPriceList values min / 2 ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock ].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:08:47'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:08:47'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:10:07'!
availableRoomProfit

	^ 0*peso! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:10:07' prior: 50538444!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ aPriceList values min / 2 ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock ].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:10:11'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:10:11'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:10:27'!
reservedRoomProfit: aPriceList

	^ aPriceList values min / 2! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:10:27' prior: 50538517!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock ].
	
	! !
!Room class methodsFor: 'error messages' stamp: 'fb 4/29/2024 19:11:18'!
signalUnknownGuestType

	self error: self class unknownGuestTypeErrorDescription
! !
!Room class methodsFor: 'error messages' stamp: 'fb 4/29/2024 19:11:39'!
unknownGuestTypeErrorDescription
	
	^ 'The guest type is unknown'! !

----SNAPSHOT----(29 April 2024 19:12:01) CuisUniversity-6169.image priorSource: 6599537!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:12:55'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:12:55'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:13:03' prior: 50538591!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ aPriceList at: guest ifAbsent: [self class signalUnknownGuestType] ].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:13:03'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:13:03'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:13:03'!
ERROR!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:13:32' prior: 50538673!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ aPriceList at: guest ifAbsent: self class signalUnknownGuestType].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:13:33'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:13:33'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:13:33'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:13:36'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:13:47'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:13:48'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:13:48'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:13:48'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:14:01'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:14:20'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:14:29'!
ERROR!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:14:55' prior: 50538747!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ aPriceList at: guest ifAbsent: (self class signalUnknownGuestType)].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:14:56'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:14:56'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:14:56'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:15:30'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:15:30'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:15:30'!
PASSED!

----SNAPSHOT----(29 April 2024 19:15:36) CuisUniversity-6169.image priorSource: 6622852!
!Room class methodsFor: 'error messages' stamp: 'fb 4/29/2024 19:16:20' prior: 50538605!
signalUnknownGuestType

	self error: self class unknownGuestTypeErrorDescription
	
! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:16:21'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:16:21'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:16:21'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:16:44'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'fb 4/29/2024 19:16:59' prior: 50539015!
signalUnknownGuestType

	self error: (self class unknownGuestTypeErrorDescription)
	
! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:17:00'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:17:00'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:17:00'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:17:00'!
PASSED!
!Room class methodsFor: 'error messages' stamp: 'fb 4/29/2024 19:17:07' prior: 50539080!
signalUnknownGuestType

	self error: self class unknownGuestTypeErrorDescription
	
! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:17:23' prior: 50538886!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock ].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:17:24'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:18:23'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:18:23'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:18:50' prior: 50539147!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ aPriceList at: guest ifAbsent: self class signalUnknownGuestType ].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:18:51'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:18:51'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:18:51'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:18:56'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:18:56'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'fb 4/29/2024 19:19:19' prior: 50539141!
signalUnknownGuestType

	self error: self unknownGuestTypeErrorDescription
	
! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:19:21'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:19:21'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:19:21'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:19:28'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:19:28'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:19:28'!
ERROR!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:19:28'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:19:42'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:20:16'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:20:16'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:20:16'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:20:46'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:20:46'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:21:21'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:21:55'!
ERROR!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:22:14' prior: 50539272!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ aPriceList at: guest ifAbsent: [self class signalUnknownGuestType] ].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:22:14'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:22:14'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:22:14'!
ERROR!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:22:45' prior: 50539495!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ aPriceList at: guest ifAbsent: [self class signalUnknownGuestType] ].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:22:45'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:22:45'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:22:45'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:22:45'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:22:45'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:22:45'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:22:45'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:22:46'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:22:46'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:22:46'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:22:46'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:22:46'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:22:46'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:22:46'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:22:46'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:22:46'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:22:46'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:22:46'!
ERROR!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:24:01'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:24:09'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:24:09'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:24:09'!
ERROR!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:24:35'!
ERROR!
!RoomTest methodsFor: 'testing' stamp: 'fb 4/29/2024 19:25:44' prior: 50532408!
test12NoProfitOnOccupiedRoomByUnknownGuestType

	| room |
	
	room := Room new.
	room receive: #unknownGuest.
	^self."
	room profitUsing: self defaultPriceList ifAbsentGuestType: [ ^self ].
	
	we should not get here
	self failWith: 'should not calculate profit on room occupied by unknown guest type'.
"! !

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:25:45'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:25:54'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:25:55'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:25:55'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:25:55'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:25:55'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:25:55'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:25:58'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:26:08'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:26:10'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:26:10'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'fb 4/29/2024 19:26:29' prior: 50539712!
test12NoProfitOnOccupiedRoomByUnknownGuestType

	| room |
	
	room := Room new.
	room receive: #unknownGuest.
	
	room profitUsing: self defaultPriceList ifAbsentGuestType: [ ^self ].
	
	"we should not get here"
	self failWith: 'should not calculate profit on room occupied by unknown guest type'.
! !

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:26:30'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:30:42'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:30:42'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:30:42'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:30:42'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:30:42'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:30:42'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:30:42'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:30:42'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:30:42'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:30:42'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:30:42'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:30:43'!
ERROR!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:30:43'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:30:43'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:30:43'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:30:43'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:30:43'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:30:43'!
ERROR!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:31:26' prior: 50539569!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock ].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:31:35'!
PASSED!

!methodRemoval: Room class #signalUnknownGuestType stamp: 'fb 4/29/2024 19:32:59'!
signalUnknownGuestType

	self error: self unknownGuestTypeErrorDescription
	
!

!methodRemoval: Room class #unknownGuestTypeErrorDescription stamp: 'fb 4/29/2024 19:33:11'!
unknownGuestTypeErrorDescription
	
	^ 'The guest type is unknown'!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:33:12'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:33:12'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:34:36'!
ifAbsentGuestType: unknownGuestTypeBlock occupiedRoomProfit: aPriceList

	^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:34:36' prior: 50540086!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ self ifAbsentGuestType: unknownGuestTypeBlock occupiedRoomProfit: aPriceList ].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:34:59'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:34:59'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:35:29'!
occupiedRoomProfit: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 

	^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:35:39' prior: 50540228!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ self occupiedRoomProfit: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 
].
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:35:41'!
PASSED!

!methodRemoval: Room #ifAbsentGuestType:occupiedRoomProfit: stamp: 'fb 4/29/2024 19:35:44'!
ifAbsentGuestType: unknownGuestTypeBlock occupiedRoomProfit: aPriceList

	^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:35:47'!
PASSED!

----SNAPSHOT----(29 April 2024 19:35:54) CuisUniversity-6169.image priorSource: 6635544!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:36:51' prior: 50540305!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	state calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: self.
	
	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ self occupiedRoomProfit: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 
].
	
	! !
!RoomState methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:37:01'!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:37:08' overrides: 50540459!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom! !
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:37:08' overrides: 50540459!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:37:08' overrides: 50540459!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom! !
!RoomState methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:37:08' prior: 50540459!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	self subclassResponsibility! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:37:40'!
calculateOccupiedRoomProfit: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 

	^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock! !
!Room methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:37:40' prior: 50540441!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	state calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: self.
	
	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ self calculateOccupiedRoomProfit: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 
].
	
	! !

!methodRemoval: Room #occupiedRoomProfit:ifAbsentGuestType: stamp: 'fb 4/29/2024 19:37:40'!
occupiedRoomProfit: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 

	^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:37:59'!
calculateOccupiedRoomProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 

	^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock! !
!Room methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:37:59' prior: 50540497!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	state calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: self.
	
	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self reservedRoomProfit: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ self calculateOccupiedRoomProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 
].
	
	! !

!methodRemoval: Room #calculateOccupiedRoomProfit:ifAbsentGuestType: stamp: 'fb 4/29/2024 19:37:59'!
calculateOccupiedRoomProfit: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 

	^ aPriceList at: guest ifAbsent: unknownGuestTypeBlock!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:38:01'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:38:01'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:38:13'!
calculateReservedRoomProfitUsing: aPriceList

	^ aPriceList values min / 2! !
!Room methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:38:13' prior: 50540530!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	state calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: self.
	
	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self availableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self calculateReservedRoomProfitUsing: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ self calculateOccupiedRoomProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 
].
	
	! !

!methodRemoval: Room #reservedRoomProfit: stamp: 'fb 4/29/2024 19:38:13'!
reservedRoomProfit: aPriceList

	^ aPriceList values min / 2!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:38:14'!
PASSED!

----SNAPSHOT----(29 April 2024 19:38:17) CuisUniversity-6169.image priorSource: 6681191!
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:38:55' prior: 50540465 overrides: 50540483!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	aRoom availableRoomProfit.! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:39:11'!
calculateAvailableRoomProfit

	^ 0*peso! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:39:11' prior: 50540700 overrides: 50540483!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	aRoom calculateAvailableRoomProfit.! !
!Room methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:39:11' prior: 50540617!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	state calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: self.
	
	"Room Available"
	(state isKindOf: Available) ifTrue: [ ^ self calculateAvailableRoomProfit ].

	"Room Reserved"
	(state isKindOf: Reserved) ifTrue: [ ^ self calculateReservedRoomProfitUsing: aPriceList ].
	
	"Room Occupied"
	((state isKindOf: Occupied)) ifTrue: [ ^ self calculateOccupiedRoomProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 
].
	
	! !

!methodRemoval: Room #availableRoomProfit stamp: 'fb 4/29/2024 19:39:11'!
availableRoomProfit

	^ 0*peso!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:39:12'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:39:12'!
PASSED!
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:39:39' prior: 50540471 overrides: 50540483!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	aRoom calculateOccupiedRoomProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock ! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:40:04' prior: 50540477 overrides: 50540483!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	aRoom calculateReservedRoomProfitUsing: aPriceList ! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:40:51' prior: 50540718!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	^state calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: self.
	"
	Room Available
	(state isKindOf: Available) ifTrue: [ ^ self calculateAvailableRoomProfit ].

	Room Reserved
	(state isKindOf: Reserved) ifTrue: [ ^ self calculateReservedRoomProfitUsing: aPriceList ].
	
	Room Occupied
	((state isKindOf: Occupied)) ifTrue: [ ^ self calculateOccupiedRoomProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock ]."
	
	! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:40:52'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:40:52'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:40:52'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:40:52'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:40:59'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:40:59'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:40:59'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:40:59'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:41:28'!
FAILURE!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:41:51' prior: 50540706!
calculateAvailableRoomProfit

	^ (0*peso)! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:41:52'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:41:52'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:41:52'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:41:52'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:41:57'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:41:57'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:41:57'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:41:57'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:42:00'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:42:06'!
FAILURE!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:42:20'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:42:20'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:42:20'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:42:20'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:42:23'!
FAILURE!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:42:23'!
FAILURE!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:43:00'!
FAILURE!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:43:13'!
FAILURE!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:43:13'!
FAILURE!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:44:02' prior: 50540948!
calculateAvailableRoomProfit

	^ 0*peso! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:44:10' prior: 50540814!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	^ state calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: self.
	"
	Room Available
	(state isKindOf: Available) ifTrue: [ ^ self calculateAvailableRoomProfit ].

	Room Reserved
	(state isKindOf: Reserved) ifTrue: [ ^ self calculateReservedRoomProfitUsing: aPriceList ].
	
	Room Occupied
	((state isKindOf: Occupied)) ifTrue: [ ^ self calculateOccupiedRoomProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock ]."
	
	! !

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:44:43'!
FAILURE!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:45:54'!
FAILURE!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:45:54'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:45:54'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:45:54'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:45:57'!
FAILURE!
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:47:43' prior: 50540711 overrides: 50540483!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	^aRoom calculateAvailableRoomProfit.! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:47:46'!
FAILURE!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:47:46'!
FAILURE!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:47:46'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:47:46'!
PASSED!
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:47:54' prior: 50540797 overrides: 50540483!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	^aRoom calculateOccupiedRoomProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock ! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:47:58' prior: 50540807 overrides: 50540483!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	^aRoom calculateReservedRoomProfitUsing: aPriceList ! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:48:01'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:48:01'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:48:12' prior: 50541146!
profitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	^ state calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: self.
! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:48:12'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:48:12'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:49:03'!
lossUsing: aPriceList ifAbsentGuestType: code! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:49:08' prior: 50541427!
lossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock! !
!RoomState methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:51:41'!
calculateLossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:51:44' overrides: 50541436!
calculateLossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom! !
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:51:44' overrides: 50541436!
calculateLossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:51:44' overrides: 50541436!
calculateLossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom! !
!RoomState methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:51:44' prior: 50541436!
calculateLossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	self subclassResponsibility! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:52:35'!
calculateAvailableRoomLoss! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:52:59'!
calculateAvailableRoomLossUsing: aPriceList

	^ aPriceList values max! !

!methodRemoval: Room #calculateAvailableRoomLoss stamp: 'fb 4/29/2024 19:53:01'!
calculateAvailableRoomLoss!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:54:21' prior: 50541431!
lossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock

	^state calculateLossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: self.
! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:55:02'!
calculateReservedRoomLossUsing: aPriceList

	^ aPriceList values max! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:55:14'!
calculateOccupiedRoomLossUsing: aPriceList

	^ aPriceList values max! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:55:16' prior: 50541490!
calculateOccupiedRoomLossUsing: aPriceList

	^ 0! !
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 19:55:36' prior: 50541485!
calculateReservedRoomLossUsing: aPriceList

	^ 0! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:55:56' prior: 50541442 overrides: 50541460!
calculateLossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	^aRoom calculateAvailableRoomLossUsing: aPriceList! !
!Occupied methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:56:12' prior: 50541448 overrides: 50541460!
calculateLossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	^ aRoom calculateOccupiedRoomLossUsing: aPriceList! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 19:56:27' prior: 50541454 overrides: 50541460!
calculateLossUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom
	
	^ aRoom calculateReservedRoomLossUsing: aPriceList.! !

----SNAPSHOT----(29 April 2024 19:56:29) CuisUniversity-6169.image priorSource: 6689437!
!RoomTest methodsFor: 'testing' stamp: 'fb 4/29/2024 19:56:52' prior: 50532420!
test13LossesOfAvailableRoomIsHalfTheMaxPriceInList

	
		| room |
	
		room := Room new.

		self assert: self maxPriceInList equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).

! !

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:56:52'!
FAILURE!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:56:52'!
FAILURE!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:56:52'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:56:52'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'fb 4/29/2024 19:57:03' prior: 50532430!
test14LossesOfReservedRoomIsCeroPesos


		| room |
	
		room := Room new.

		room reserve.

		self assert: 0*peso equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
	
! !
!RoomTest methodsFor: 'testing' stamp: 'fb 4/29/2024 19:57:07' prior: 50532439!
test15LossesOfOccupiedRoomIsCeroPesos


		| room |
		
		room := Room new.

		room receive: self guestTypeVacation.

		self assert: 0*peso equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
	! !

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:57:07'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:57:07'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'fb 4/29/2024 19:57:13' prior: 50541532!
test13LossesOfAvailableRoomIsHalfTheMaxPriceInList

	
	| room |

	room := Room new.

	self assert: self maxPriceInList equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).

! !
!RoomTest methodsFor: 'testing' stamp: 'fb 4/29/2024 19:57:16' prior: 50541601!
test14LossesOfReservedRoomIsCeroPesos


	| room |

	room := Room new.

	room reserve.

	self assert: 0*peso equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).

! !
!RoomTest methodsFor: 'testing' stamp: 'fb 4/29/2024 19:57:20' prior: 50541610!
test15LossesOfOccupiedRoomIsCeroPesos


	| room |

	room := Room new.

	room receive: self guestTypeVacation.

	self assert: 0*peso equals: (room lossUsing: self defaultPriceList ifAbsentGuestType: [ self fail ]).
! !

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 19:57:25'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 19:57:25'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:02:59'!
doAnAction: anActionToValue atFloor: aFloorNumber	 inRoom: aRoomNumber
	
	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor roomAt: aRoomNumber.

	anActionToValue value.! !
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:05:22' prior: 50541765!
doAnAction: anActionToValue atFloor: aFloorNumber	 inRoom: aRoomNumber
	
	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor roomAt: aRoomNumber.

	anActionToValue value: room.! !
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:06:19' prior: 50537103!
receive: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	"self doAnAction: [:room | room receive: aGuestType] atFloor: aFloorNumber  inRoom: aRoomNumber." 

	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor roomAt: aRoomNumber.

	room receive: aGuestType.
	
	availableRoomsCount := availableRoomsCount - 1.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:06:20'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:06:20'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:06:20'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:06:20'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:06:20'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:06:20'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:06:20'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:06:20'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:06:20'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:06:20'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:06:20'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:06:20'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:06:20'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:06:28' prior: 50541787!
receive: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	self doAnAction: [:room | room receive: aGuestType] atFloor: aFloorNumber  inRoom: aRoomNumber."

	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor roomAt: aRoomNumber.

	room receive: aGuestType.
	
	availableRoomsCount := availableRoomsCount - 1.
"! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:06:28'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:06:28'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:06:28'!
FAILURE!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:06:28'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:06:28'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:06:28'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:06:28'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:06:28'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:06:28'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:06:28'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:06:28'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:06:28'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:06:28'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:06:28'!
FAILURE!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:06:42'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:06:42'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:06:42'!
FAILURE!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:06:42'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:06:42'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:06:42'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:06:42'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:06:42'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:06:42'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:06:42'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:06:42'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:06:42'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:06:42'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:06:42'!
FAILURE!

----SNAPSHOT----(29 April 2024 20:06:47) CuisUniversity-6169.image priorSource: 6716107!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:07:15'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:07:15'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:07:15'!
FAILURE!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:07:15'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:07:15'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:07:15'!
FAILURE!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:07:15'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:07:15'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:07:15'!
FAILURE!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:07:15'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:07:15'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:07:15'!
FAILURE!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:08:25'!
FAILURE!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:09:23' prior: 50541846!
receive: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	self doAnAction: [:room | room receive: aGuestType] atFloor: aFloorNumber  inRoom: aRoomNumber."

	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor roomAt: aRoomNumber.

	room receive: aGuestType."
	
	availableRoomsCount := availableRoomsCount - 1.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:09:23'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:09:23'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:09:23'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:09:23'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:09:23'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:09:23'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:09:23'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:09:23'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:09:23'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:09:23'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:09:23'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:09:23'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:09:23'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:09:25' prior: 50542003!
receive: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	self doAnAction: [:room | room receive: aGuestType] atFloor: aFloorNumber  inRoom: aRoomNumber."

	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor roomAt: aRoomNumber.

	room receive: aGuestType."
	
	availableRoomsCount := availableRoomsCount - 1.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:09:26'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:09:26'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:09:26'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:09:26'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:09:26'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:09:26'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:09:26'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:09:26'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:09:26'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:09:26'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:09:26'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:09:26'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:09:26'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:09:36' prior: 50542062!
receive: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	self doAnAction: [:room | room receive: aGuestType] atFloor: aFloorNumber  inRoom: aRoomNumber.
	
	availableRoomsCount := availableRoomsCount - 1.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:09:37'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:09:37'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:09:37'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:09:37'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:09:37'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:09:37'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:09:37'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:09:37'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:09:37'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:09:37'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:09:37'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:09:37'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:09:37'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:10:00' prior: 50537213!
receiveWithReservation: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	self doAnAction: [:room | room receiveWithReservation: aGuestType] atFloor: aFloorNumber  inRoom: aRoomNumber.

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:10:01'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:10:01'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:10:01'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:10:01'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:10:01'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:10:01'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:10:01'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:10:01'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:10:01'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:10:01'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:10:01'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:10:01'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:10:01'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:10:06' prior: 50542175!
receiveWithReservation: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	self doAnAction: [:room | room receiveWithReservation: aGuestType] atFloor: aFloorNumber  inRoom: aRoomNumber.

	! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:10:06'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:10:06'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:10:06'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:10:06'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:10:06'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:10:06'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:10:06'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:10:06'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:10:06'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:10:06'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:10:06'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:10:06'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:10:06'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:10:24' prior: 50537269!
reserveRoom: aRoomNumber atFloor: aFloorNumber

	self doAnAction: [:room | room reserve] atFloor: aFloorNumber  inRoom: aRoomNumber.

	availableRoomsCount := availableRoomsCount - 1.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:10:24'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:10:24'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:10:24'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:10:24'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:10:24'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:10:24'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:10:24'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:10:24'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:10:24'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:10:24'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:10:24'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:10:24'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:10:24'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:11:43'!
performGuestManagementAction: anActionToValue atFloor: aFloorNumber	 inRoom: aRoomNumber
	
	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor roomAt: aRoomNumber.

	anActionToValue value: room.! !
!Hotel methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:11:43' prior: 50542121!
receive: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	self performGuestManagementAction: [:room | room receive: aGuestType] atFloor: aFloorNumber  inRoom: aRoomNumber.
	
	availableRoomsCount := availableRoomsCount - 1.
! !
!Hotel methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:11:43' prior: 50542228!
receiveWithReservation: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	self performGuestManagementAction: [:room | room receiveWithReservation: aGuestType] atFloor: aFloorNumber  inRoom: aRoomNumber.

	! !
!Hotel methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:11:43' prior: 50542281!
reserveRoom: aRoomNumber atFloor: aFloorNumber

	self performGuestManagementAction: [:room | room reserve] atFloor: aFloorNumber  inRoom: aRoomNumber.

	availableRoomsCount := availableRoomsCount - 1.
! !

!methodRemoval: Hotel #doAnAction:atFloor:inRoom: stamp: 'fb 4/29/2024 20:11:43'!
doAnAction: anActionToValue atFloor: aFloorNumber	 inRoom: aRoomNumber
	
	| floor room |
	
	floor := floors at: aFloorNumber ifAbsent:  [ self class signalFloorNumberDoesNotExist ].
	room := floor roomAt: aRoomNumber.

	anActionToValue value: room.!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:11:43'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:11:44'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:11:46'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:11:48'!
PASSED!

----SNAPSHOT----(29 April 2024 20:11:56) CuisUniversity-6169.image priorSource: 6729782!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:12:00'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:12:02'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:12:02'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:12:02'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:12:02'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:12:02'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:12:02'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:12:02'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:12:02'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:12:02'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:12:04'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:12:04'!
PASSED!
!Floor methodsFor: 'accounting' stamp: 'fb 4/29/2024 20:12:32' prior: 50532517!
totalLosses
	
	| total |
	
	total := 0*peso.
	total := rooms sum: [ :room | room isAvailable ifTrue: [ total := total + prices values max ] ].

	^ total

		
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:12:32'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:12:32'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:12:32'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:12:32'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:12:32'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:12:32'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:12:32'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:12:32'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:12:32'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:12:32'!
ERROR!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:12:37'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:12:37'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:12:37'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:12:37'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:12:37'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:12:37'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:12:37'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:12:37'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:12:37'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:12:37'!
ERROR!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:12:51'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:12:51'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:12:51'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:12:51'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:12:51'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:12:51'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:12:51'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:12:51'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:12:51'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:12:51'!
ERROR!
!Floor methodsFor: 'accounting' stamp: 'FRT 4/21/2024 13:23:04' prior: 50542701!
totalLosses
	
	| total |
	
	total := 0*peso.
	rooms do: [ :room | room isAvailable ifTrue: [ total := total + prices values max ] ].

	^ total

		
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:13:13'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:13:13'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:13:13'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:13:13'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:13:13'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:13:13'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:13:13'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:13:13'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:13:13'!
PASSED!
!Hotel methodsFor: 'accounting' stamp: 'fb 4/29/2024 20:13:56' prior: 50532688!
totalProfits

	| acc |
	
	acc := 0.
	acc := floors sum:[:floor | floor totalProfits].


	^ acc.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:13:56'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:13:56'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:13:56'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:13:56'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:13:56'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:13:56'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:13:56'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:13:56'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:13:56'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:13:56'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:13:56'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:13:56'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:13:56'!
PASSED!
!Hotel methodsFor: 'accounting' stamp: 'fb 4/29/2024 20:14:06' prior: 50532682!
totalLosses

	| acc |
	
	acc := 0.
	acc := floors sum:[:floor | floor totalProfits].

	^ acc.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:14:07'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:14:07'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:14:07'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:14:07'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:14:07'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:14:07'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:14:07'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:14:07'!
FAILURE!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:14:07'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:14:07'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:14:07'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:14:07'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:14:07'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:14:07'!
FAILURE!
!Hotel methodsFor: 'accounting' stamp: 'fb 4/29/2024 20:14:20' prior: 50542920!
totalLosses

	| acc |
	
	acc := 0.
	acc := floors sum:[:floor | floor totalLosses].

	^ acc.
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:14:21'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:14:21'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:14:21'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:14:21'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:14:21'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:14:21'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:14:21'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:14:21'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:14:21'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:14:21'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:14:21'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:14:21'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:14:21'!
PASSED!
!Hotel methodsFor: 'accounting' stamp: 'fb 4/29/2024 20:14:30' prior: 50542974!
totalLosses

	^ floors sum:[:floor | floor totalLosses].
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:14:30'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:14:30'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:14:30'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:14:30'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:14:30'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:14:30'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:14:30'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:14:30'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:14:30'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:14:30'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:14:30'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:14:30'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:14:30'!
PASSED!
!Hotel methodsFor: 'accounting' stamp: 'fb 4/29/2024 20:14:39' prior: 50542870!
totalProfits

	^ floors sum:[:floor | floor totalProfits].
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:14:39'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:14:39'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:14:39'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:14:39'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:14:39'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:14:39'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:14:39'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:14:39'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:14:39'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:14:39'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:14:39'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:14:39'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:14:39'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 20:16:28' prior: 50538096!
totalRoomsReserved
	
	^floors sum:[:floor | floor totalRoomsReserved].

	! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:16:29'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:16:29'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:16:29'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:16:29'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:16:29'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:16:29'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:16:29'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:16:29'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:16:29'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:16:29'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:16:29'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:16:29'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:16:29'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 20:16:44' prior: 50538393!
totalRoomsOccupied

	^floors sum:[:floor | floor totalRoomsOccupied].

	

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:16:44'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:16:44'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:16:44'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:16:44'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:16:44'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:16:44'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:16:44'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:16:44'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:16:44'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:16:44'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:16:44'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:16:44'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:16:44'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 20:17:02' prior: 50532717!
totalRoomsAvailable

	^floors sum:[:floor | floor totalRoomsAvailable].! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:17:03'!
PASSED!

Object subclass: #Hotel
	instanceVariableNames: 'floors'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!classDefinition: #Hotel category: #'ISW1-2024-1C-Parcial' stamp: 'fb 4/29/2024 20:17:23'!
Object subclass: #Hotel
	instanceVariableNames: 'floors'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2024-1C-Parcial'!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:17:25'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:17:25'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:17:25'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:17:25'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:17:25'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:17:25'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:17:25'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:17:25'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:17:25'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:17:25'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:17:25'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:17:25'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:17:25'!
PASSED!
!Hotel methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:17:37' prior: 50534513!
initializeWithFloors: aFloorsCollection

	self class assertHaveFloors: aFloorsCollection.

	floors := aFloorsCollection.
	! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:17:38'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:17:38'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:17:38'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:17:38'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:17:38'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:17:38'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:17:38'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:17:38'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:17:38'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:17:38'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:17:38'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:17:38'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:17:38'!
PASSED!
!Hotel methodsFor: 'totals' stamp: 'fb 4/29/2024 20:18:00' prior: 50538249!
totalRooms
	
	^floors sum:[:floor | floor totalRooms].! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:18:00'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:18:00'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:18:00'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:18:00'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:18:00'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:18:00'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:18:00'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:18:00'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:18:00'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:18:00'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:18:00'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:18:00'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:18:00'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:18:21' prior: 50542345!
receive: aGuestType atFloor: aFloorNumber atRoom: aRoomNumber

	self performGuestManagementAction: [:room | room receive: aGuestType] atFloor: aFloorNumber  inRoom: aRoomNumber.
	
! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:18:22'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:18:22'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:18:22'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:18:22'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:18:22'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:18:22'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:18:22'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:18:22'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:18:22'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:18:22'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:18:22'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:18:22'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:18:22'!
PASSED!
!Hotel methodsFor: 'guests' stamp: 'fb 4/29/2024 20:18:28' prior: 50542366!
reserveRoom: aRoomNumber atFloor: aFloorNumber

	self performGuestManagementAction: [:room | room reserve] atFloor: aFloorNumber  inRoom: aRoomNumber.

! !

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:18:29'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:18:29'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:18:29'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:18:29'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:18:29'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:18:29'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:18:29'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:18:29'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:18:29'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:18:29'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:18:29'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:18:29'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:18:29'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:20:14'!
assertThatAPriceListIsNotEmpty: aPriceList

	^ aPriceList isEmpty ifTrue: [ self class signalNoPrices ]! !
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:20:14' prior: 50534010!
initializePriceList: aPriceList

	self assertThatAPriceListIsNotEmpty: aPriceList.
	
	self assertEveryPriceIsPositive: aPriceList.
	
	self initializePrices: aPriceList.! !
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:20:23' prior: 50543538!
initializePriceList: aPriceList

	self assertThatAPriceListIsNotEmpty: aPriceList.
	self assertEveryPriceIsPositive: aPriceList.
	
	self initializePrices: aPriceList.! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:21:13'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:21:13'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:21:13'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:21:13'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:21:13'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:21:13'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:21:13'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:21:13'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:21:13'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:21:25' prior: 50543546!
initializePriceList: aPriceList

	self assertThatAPriceListIsNotEmpty: aPriceList.
	self assertEveryPriceIsPositive: aPriceList.
	
	prices := aPriceList! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:21:26'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:21:26'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:21:26'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:21:26'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:21:26'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:21:26'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:21:26'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:21:26'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:21:26'!
PASSED!

!methodRemoval: Floor #initializePrices: stamp: 'fb 4/29/2024 20:21:49'!
initializePrices: aPriceList

	^ prices := aPriceList!
!Floor methodsFor: 'accessing' stamp: 'fb 4/29/2024 20:22:12' prior: 50532514!
rooms

	^ rooms copy! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:22:13'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:22:13'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:22:13'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:22:13'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:22:13'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:22:13'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:22:13'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:22:13'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:22:13'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:22:14'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:22:14'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:22:14'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:22:14'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:22:14'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:22:14'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:22:14'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:22:14'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:22:14'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:24:46' prior: 50534055!
initializeRoomsWith: aNumberOfRooms


	| ix |
	
	rooms := OrderedCollection new.
	0 to: aNumberOfRooms do: (rooms add: Room new).
	"
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]
"
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:24:53'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:24:53'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:24:53'!
ERROR!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:24:53'!
ERROR!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:24:53'!
ERROR!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:24:53'!
ERROR!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:24:53'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:24:53'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:24:53'!
ERROR!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:25:07' prior: 50543713!
initializeRoomsWith: aNumberOfRooms


	| ix |
	
	rooms := OrderedCollection new.
	0 to: aNumberOfRooms do: (rooms add: Room new).
	
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]

! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:25:08'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:25:08'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:25:08'!
ERROR!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:25:08'!
ERROR!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:25:08'!
ERROR!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:25:08'!
ERROR!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:25:08'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:25:08'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:25:08'!
ERROR!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:25:15' prior: 50543759!
initializeRoomsWith: aNumberOfRooms


	| ix |
	
	rooms := OrderedCollection new.

	
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]

! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:25:16'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:25:16'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:25:16'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:25:16'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:25:16'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:25:16'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:25:16'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:25:16'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:25:16'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:25:26' prior: 50543805!
initializeRoomsWith: aNumberOfRooms


	| ix |
	
	rooms := OrderedCollection new.
	1 to: aNumberOfRooms do: (rooms add: Room new).
	"
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]
"
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:25:29'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:25:29'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:25:29'!
ERROR!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:25:29'!
ERROR!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:25:29'!
ERROR!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:25:29'!
ERROR!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:25:29'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:25:29'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:25:29'!
ERROR!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:25:33'!
ERROR!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:25:38'!
FAILURE!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:26:10' prior: 50543850!
initializeRoomsWith: aNumberOfRooms


	| ix |
	
	rooms := OrderedCollection new.
	"1 to: aNumberOfRooms do: (rooms add: Room new)."
	
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]

! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:26:15'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:26:15'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:26:15'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:26:15'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:26:15'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:26:15'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:26:15'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:26:15'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:26:15'!
PASSED!
!Floor methodsFor: 'accounting' stamp: 'fb 4/29/2024 20:27:11' prior: 50542827!
totalLosses
	
	| total |
	
	total := 0*peso.

	rooms do: [ :room | room isAvailable ifTrue: [ total := total + prices values max ] ].

	^ total

		
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:27:12'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:27:12'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:27:12'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:27:12'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:27:12'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:27:12'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:27:12'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:27:12'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:27:12'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:28:11' prior: 50543902!
initializeRoomsWith: aNumberOfRooms


	| ix |
	
	rooms := OrderedCollection new.
	1 to: aNumberOfRooms do: (rooms addLast: Room new).
	"
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]
"
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:28:14'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:28:14'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:28:14'!
ERROR!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:28:14'!
ERROR!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:28:14'!
ERROR!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:28:14'!
ERROR!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:28:14'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:28:14'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:28:14'!
ERROR!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:28:32'!
ERROR!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:28:35'!
ERROR!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:28:53'!
ERROR!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:29:20'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:29:26'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:29:26'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:29:26'!
ERROR!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:29:26'!
ERROR!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:29:26'!
ERROR!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:29:26'!
ERROR!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:29:26'!
ERROR!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:29:26'!
ERROR!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:29:26'!
ERROR!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:29:36'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:29:58'!
ERROR!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:30:06'!
FAILURE!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:30:49' prior: 50531835!
test03CannotCreateFloorWithoutPrices
	
	self createFloorWith:10 and: Dictionary new.
	
	self
		should: [ self createFloorWith: 10 and:  Dictionary new ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Floor pricesListCannotBeEmptyErrorDescription ! !

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:31:12'!
ERROR!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:31:27'!
ERROR!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:31:34'!
ERROR!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:32:03' prior: 50543992!
initializeRoomsWith: aNumberOfRooms


	| ix |
	
	rooms := OrderedCollection new.
	1 to: aNumberOfRooms do: [rooms addLast: Room new].
	"
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]
"
! !
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:32:09' prior: 50544095!
test03CannotCreateFloorWithoutPrices
	
	self
		should: [ self createFloorWith: 10 and:  Dictionary new ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Floor pricesListCannotBeEmptyErrorDescription ! !

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:32:10'!
FAILURE!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:32:14'!
FAILURE!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:32:38' prior: 50544116!
initializeRoomsWith: aNumberOfRooms


	| ix |
	
	rooms := OrderedCollection new.
	1 to: aNumberOfRooms do: [:room | rooms addLast: Room new].
	"
	ix := 1.
	[ ix <= aNumberOfRooms ] whileTrue: [ 
		rooms add: Room new.
		ix := ix + 1.
	]
"
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:32:41'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:32:41'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:32:41'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:32:41'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:32:41'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:32:41'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:32:41'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:32:41'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:32:41'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:32:43'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:32:43'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:32:43'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:32:43'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:32:43'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:32:43'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:32:43'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:32:43'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:32:43'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:32:49' prior: 50544142!
initializeRoomsWith: aNumberOfRooms

	rooms := OrderedCollection new.
	1 to: aNumberOfRooms do: [:room | rooms addLast: Room new].

! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:32:50'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:32:50'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:32:50'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:32:50'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:32:50'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:32:50'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:32:50'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:32:50'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:32:50'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:33:10' prior: 50544224!
initializeRoomsWith: aNumberOfRooms

	rooms := OrderedCollection new.
	1 to: aNumberOfRooms do: [:currentRoomNumber | rooms addLast: Room new].

! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:33:11'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:33:11'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:33:11'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:33:11'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:33:11'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:33:11'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:33:11'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:33:11'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:33:11'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:34:04'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:34:04'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:34:04'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:34:04'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:34:04'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:34:04'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:34:04'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:34:04'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:34:04'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:34:15'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:34:15'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:34:15'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:34:15'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:34:15'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:34:15'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:34:15'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:34:15'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:34:15'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:34:58'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:34:58'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:34:58'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:34:58'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:34:58'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:34:58'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:34:58'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:34:58'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:34:58'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:35:00'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:35:01'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:35:01'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:35:44'!
initializeANumberOfRooms: aNumberOfRooms

	rooms := OrderedCollection new.
	1 to: aNumberOfRooms do: [:currentRoomNumber | rooms addLast: Room new].

! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:35:44' prior: 50533452!
initializeNumberOfRooms: aNumberOfRooms

	self class assertIsPositive: aNumberOfRooms ifFalse: [ self class signalNumberOfRoomsMustBePositive ].
	self class assertIsInteger: aNumberOfRooms ifFalse: [ self class signalNumberOfRoomsMustBeInteger ].
	
	self initializeANumberOfRooms: aNumberOfRooms.
! !

!methodRemoval: Floor #initializeRoomsWith: stamp: 'fb 4/29/2024 20:35:44'!
initializeRoomsWith: aNumberOfRooms

	rooms := OrderedCollection new.
	1 to: aNumberOfRooms do: [:currentRoomNumber | rooms addLast: Room new].

!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:35:45'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:35:45'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:35:45'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:35:45'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:35:45'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:35:45'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:35:45'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:35:45'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:35:45'!
PASSED!
!Floor methodsFor: 'initialization' stamp: 'fb 4/29/2024 20:36:15'!
initializeRooms: aNumberOfRooms

	self class assertIsPositive: aNumberOfRooms ifFalse: [ self class signalNumberOfRoomsMustBePositive ].
	self class assertIsInteger: aNumberOfRooms ifFalse: [ self class signalNumberOfRoomsMustBeInteger ].
	
	self initializeANumberOfRooms: aNumberOfRooms.
! !
!Floor methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:36:15' prior: 50533957!
initializeWith: aPriceList and: aNumberOfRooms

	self initializeRooms: aNumberOfRooms.
	self initializePriceList: aPriceList.
! !
!HotelTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:36:15' prior: 50533473!
createFloorWith: aNumberOfRooms and: aPrice

	| floor |

	floor := Floor new.
	floor initializeRooms: aNumberOfRooms.
	floor initializePriceList: aPrice.
	
	^ floor.! !

!methodRemoval: Floor #initializeNumberOfRooms: stamp: 'fb 4/29/2024 20:36:15'!
initializeNumberOfRooms: aNumberOfRooms

	self class assertIsPositive: aNumberOfRooms ifFalse: [ self class signalNumberOfRoomsMustBePositive ].
	self class assertIsInteger: aNumberOfRooms ifFalse: [ self class signalNumberOfRoomsMustBeInteger ].
	
	self initializeANumberOfRooms: aNumberOfRooms.
!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:36:17'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:36:17'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:36:17'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:36:17'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:36:17'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:36:17'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:36:17'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:36:17'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:36:17'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 20:41:16'!
calculateReservedRoomProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 

	^ aPriceList values min / 2! !
!Reserved methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:41:27' prior: 50541301 overrides: 50540483!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	^aRoom calculateReservedRoomProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock ! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:41:32'!
PASSED!

----SNAPSHOT----(29 April 2024 20:41:44) CuisUniversity-6169.image priorSource: 6749177!

!methodRemoval: Room #calculateReservedRoomProfitUsing: stamp: 'fb 4/29/2024 20:42:44'!
calculateReservedRoomProfitUsing: aPriceList

	^ aPriceList values min / 2!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:42:47'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:42:47'!
PASSED!
!Room methodsFor: 'accounting' stamp: 'fb 4/29/2024 20:42:57'!
calculateAvailableRoomProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock 

	^ 0*peso! !
!Available methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:43:08' prior: 50541228 overrides: 50540483!
calculateProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock in: aRoom

	^aRoom calculateAvailableRoomProfitUsing: aPriceList ifAbsentGuestType: unknownGuestTypeBlock ! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:43:11'!
PASSED!

!methodRemoval: Room #calculateAvailableRoomProfit stamp: 'fb 4/29/2024 20:43:21'!
calculateAvailableRoomProfit

	^ 0*peso!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:43:23'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:43:23'!
PASSED!
!RoomState methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:44:46'!
isAvailable

	self subclassResponsibility! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:44:50'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:44:50'!
PASSED!
!RoomState methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:44:54'!
isOccupied

	self subclassResponsibility! !
!RoomState methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:44:58'!
isReserved

	self subclassResponsibility! !

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:45:02'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:45:32'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:47:03'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:47:04'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:47:06'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:47:08'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:47:08'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:47:08'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:47:08'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:47:08'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:47:08'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:47:08'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:47:08'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:47:08'!
PASSED!

----SNAPSHOT----(29 April 2024 20:47:10) CuisUniversity-6169.image priorSource: 6818403!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:50:54'!
assertThatThereIs: aNumberOfRoomsOccupied and: aNumberOfRoomsReserved at: aFloor

	self assert: aNumberOfRoomsOccupied equals: aFloor totalRoomsOccupied.
	self assert: aNumberOfRoomsReserved equals: aFloor totalRoomsReserved.
! !

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:50:57'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:50:57'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:50:57'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:50:57'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:50:57'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:50:57'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:50:57'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:50:57'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:50:57'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:50:58'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:51:01'!
PASSED!

----SNAPSHOT----(29 April 2024 20:51:07) CuisUniversity-6169.image priorSource: 6836415!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:51:38' prior: 50531844!
test04WhenAFloorIsCreatedAllTheRoomsAreAvailable

	| floor |
	
	floor := self createFloorWith: 10 and: self defaultPriceList.
	
	self assert: floor isAvailable.
	
	self assertThatThereIs: 0 and: 0 at: floor.

! !

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:51:39'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:51:39'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:51:39'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:51:39'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:51:39'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:51:39'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:51:39'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:51:39'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:51:39'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:51:39'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:52:19'!
assertThatThereAreRoomsOccupied: aNumberOfRoomsOccupied andRoomsReserved: aNumberOfRoomsReserved at: aFloor

	self assert: aNumberOfRoomsOccupied equals: aFloor totalRoomsOccupied.
	self assert: aNumberOfRoomsReserved equals: aFloor totalRoomsReserved.
! !
!FloorTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:52:19' prior: 50545439!
test04WhenAFloorIsCreatedAllTheRoomsAreAvailable

	| floor |
	
	floor := self createFloorWith: 10 and: self defaultPriceList.
	
	self assert: floor isAvailable.
	
	self assertThatThereAreRoomsOccupied: 0 andRoomsReserved: 0 at: floor.

! !

!methodRemoval: FloorTest #assertThatThereIs:and:at: stamp: 'fb 4/29/2024 20:52:19'!
assertThatThereIs: aNumberOfRoomsOccupied and: aNumberOfRoomsReserved at: aFloor

	self assert: aNumberOfRoomsOccupied equals: aFloor totalRoomsOccupied.
	self assert: aNumberOfRoomsReserved equals: aFloor totalRoomsReserved.
!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:52:52' prior: 50531855!
test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne

	| floor roomsNumber |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation.
	
	self assert: roomsNumber - 1 equals: floor totalRoomsAvailable. 
	self assertThatThereAreRoomsOccupied: 1 andRoomsReserved: 0 at: floor.

! !

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:52:53'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:52:53'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:52:53'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:52:53'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:52:53'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:52:53'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:52:53'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:52:53'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:52:53'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:52:53'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:53:58'!
assertThatThereIsANumberOfRoomsOccupied: aNumberOfRoomsOccupied andANumberOfRoomsReserved: aNumberOfRoomsReserved at: aFloor

	self assert: aNumberOfRoomsOccupied equals: aFloor totalRoomsOccupied.
	self assert: aNumberOfRoomsReserved equals: aFloor totalRoomsReserved.
! !
!FloorTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:53:58' prior: 50545498!
test04WhenAFloorIsCreatedAllTheRoomsAreAvailable

	| floor |
	
	floor := self createFloorWith: 10 and: self defaultPriceList.
	
	self assert: floor isAvailable.
	
	self assertThatThereIsANumberOfRoomsOccupied: 0 andANumberOfRoomsReserved: 0 at: floor.

! !
!FloorTest methodsFor: 'as yet unclassified' stamp: 'fb 4/29/2024 20:53:58' prior: 50545518!
test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne

	| floor roomsNumber |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation.
	
	self assert: roomsNumber - 1 equals: floor totalRoomsAvailable. 
	self assertThatThereIsANumberOfRoomsOccupied: 1 andANumberOfRoomsReserved: 0 at: floor.

! !

!methodRemoval: FloorTest #assertThatThereAreRoomsOccupied:andRoomsReserved:at: stamp: 'fb 4/29/2024 20:53:58'!
assertThatThereAreRoomsOccupied: aNumberOfRoomsOccupied andRoomsReserved: aNumberOfRoomsReserved at: aFloor

	self assert: aNumberOfRoomsOccupied equals: aFloor totalRoomsOccupied.
	self assert: aNumberOfRoomsReserved equals: aFloor totalRoomsReserved.
!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:53:59'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:53:59'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:53:59'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:53:59'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:53:59'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:53:59'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:53:59'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:53:59'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:53:59'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:55:00' prior: 50531872!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne

	| floor roomsNumber roomsAvailable roomsOccupied roomsReserved |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation.


	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:55:14' prior: 50545661!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne

	| floor roomsNumber roomsAvailable roomsOccupied roomsReserved |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation.

	self assertThatThereIsANumberOfRoomsOccupied: 0 andANumberOfRoomsReserved: 0 at: floor.
	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:55:15'!
FAILURE!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:55:23' prior: 50545687!
test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne

	| floor roomsNumber roomsAvailable roomsOccupied roomsReserved |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.

	roomsAvailable := floor totalRoomsAvailable.
	roomsOccupied := floor totalRoomsOccupied.
	roomsReserved := floor totalRoomsReserved.

	"Tech Debt"
	((floor rooms) at: 1) receiveWithReservation: self guestTypeVacation.

	self assert: roomsAvailable equals: floor totalRoomsAvailable. 
	self assert: roomsOccupied equals: floor totalRoomsOccupied.
	self assert: roomsReserved - 1 equals: floor totalRoomsReserved.
! !
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:56:04' prior: 50531898!
test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne

	| floor roomsNumber |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.
	
	self assert: roomsNumber - 1 equals: floor totalRoomsAvailable. 
	self assertThatThereIsANumberOfRoomsOccupied: 1 andANumberOfRoomsReserved: 1 at: floor.
	self assert: 1 equals: floor totalRoomsOccupied.
	self assert: 1 equals: floor totalRoomsReserved.
! !

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:56:05'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:56:05'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:56:05'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:56:05'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:56:05'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:56:05'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:56:05'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:56:05'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:56:05'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:56:05'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:56:07' prior: 50545747!
test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne

	| floor roomsNumber |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) reserve.
	
	self assert: roomsNumber - 1 equals: floor totalRoomsAvailable. 
	self assertThatThereIsANumberOfRoomsOccupied: 1 andANumberOfRoomsReserved: 1 at: floor.
! !
!FloorTest methodsFor: 'create' stamp: 'fb 4/29/2024 20:57:35'!
assertThatAPesosAmout: aPesosAmount equalsTotalProfitsAt: aFloor. 

	self assert: aPesosAmount equals: aFloor totalProfits! !
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:58:08' prior: 50531914!
test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits

	| floor roomsNumber |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation.
	((floor rooms) at: 2) receive: self guestTypeConference.
	((floor rooms) at: 3) reserve.
	
	self assertThatAPesosAmout: ( (100*peso) + (200*peso) + (50*peso)) equalsTotalProfitsAt: floor. 
	
	self assert:(100*peso) + (200*peso) + (50*peso) equals: floor totalProfits
! !

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:58:08'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:58:08'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:58:08'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:58:08'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:58:08'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:58:08'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:58:08'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:58:08'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:58:08'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:58:08'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:58:12' prior: 50545830!
test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits

	| floor roomsNumber |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation.
	((floor rooms) at: 2) receive: self guestTypeConference.
	((floor rooms) at: 3) reserve.
	
	self assertThatAPesosAmout: ( (100*peso) + (200*peso) + (50*peso)) equalsTotalProfitsAt: floor. 
	! !

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:58:12'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:58:12'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:58:13'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:58:13'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:58:13'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:58:13'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:58:13'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:58:13'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:58:13'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:58:13'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:58:33' prior: 50531930!
test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses

	| floor roomsNumber |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation.
	((floor rooms) at: 2) receive: self guestTypeConference.
	((floor rooms) at: 3) reserve.
		
	self assertThatAPesosAmout: (200*peso) equalsTotalProfitsAt: floor. 
! !

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:58:33'!
FAILURE!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:58:40'!
FAILURE!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:58:45'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:58:45'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:58:45'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:58:45'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:58:45'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:58:45'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:58:45'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:58:45'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:58:45'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:58:45'!
FAILURE!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:58:45'!
FAILURE!
!FloorTest methodsFor: 'testing' stamp: 'FRT 4/21/2024 20:01:22' prior: 50545945!
test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses

	| floor roomsNumber |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation.
	((floor rooms) at: 2) receive: self guestTypeConference.
	((floor rooms) at: 3) reserve.
		
	self assert: (200*peso) * 7 equals: floor totalLosses
! !

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:58:53'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:58:53'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:58:53'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:58:53'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:58:53'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:58:53'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:58:53'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:58:53'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:58:53'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:58:53'!
PASSED!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:59:06' prior: 50546011!
test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses

	| floor roomsNumber |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation.
	((floor rooms) at: 2) receive: self guestTypeConference.
	((floor rooms) at: 3) reserve.
		
	self assertThatAPesosAmout: 200*peso equalsTotalProfitsAt: floor. 
	
	self assert: (200*peso) * 7 equals: floor totalLosses
! !

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:59:07'!
FAILURE!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:59:45'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:59:45'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:59:45'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:59:45'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:59:45'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:59:45'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:59:45'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:59:45'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:59:45'!
FAILURE!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:59:45'!
FAILURE!
!FloorTest methodsFor: 'testing' stamp: 'fb 4/29/2024 20:59:53' prior: 50546066!
test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses

	| floor roomsNumber |
	
	roomsNumber := 10.
	floor := self createFloorWith: roomsNumber and: self defaultPriceList.
	
	"Tech Debt"
	((floor rooms) at: 1) receive: self guestTypeVacation.
	((floor rooms) at: 2) receive: self guestTypeConference.
	((floor rooms) at: 3) reserve.

	self assert: (200*peso) * 7 equals: floor totalLosses
! !

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:59:53'!
PASSED!

!testRun: #FloorTest #test01CannotCreateFloorWithoutRooms stamp: 'fb 4/29/2024 20:59:53'!
PASSED!

!testRun: #FloorTest #test02CannotCreateFloorWithNoIntergerNumberOfRooms stamp: 'fb 4/29/2024 20:59:53'!
PASSED!

!testRun: #FloorTest #test03CannotCreateFloorWithoutPrices stamp: 'fb 4/29/2024 20:59:53'!
PASSED!

!testRun: #FloorTest #test04WhenAFloorIsCreatedAllTheRoomsAreAvailable stamp: 'fb 4/29/2024 20:59:53'!
PASSED!

!testRun: #FloorTest #test05WhenAFloorReceivesAGuestInARoomReducesTheAvailableRoomsByOneAndIncreaseOccupiedByOne stamp: 'fb 4/29/2024 20:59:53'!
PASSED!

!testRun: #FloorTest #test06WhenAFloorReceivesOnReservationAGuestInARoomKeepsTheAvailableRoomsAndOccupiedAndReducesTheReservedByOne stamp: 'fb 4/29/2024 20:59:53'!
PASSED!

!testRun: #FloorTest #test07WhenARoomIsReservedTheFloorAvailableRoomsReducesByOneAndIncreaseReservedAndOccupiedByOne stamp: 'fb 4/29/2024 20:59:53'!
PASSED!

!testRun: #FloorTest #test08TotalProfitShouldBeTheSumOfOccupiedRoomsProfits stamp: 'fb 4/29/2024 20:59:53'!
PASSED!

!testRun: #FloorTest #test09TotalLossesShouldBeTheSumOfAvailableRoomsLosses stamp: 'fb 4/29/2024 20:59:53'!
PASSED!

!testRun: #HotelTest #test01CannotCreateHotelWithoutFloors stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #HotelTest #test02NewHotelsAreEmpty stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #HotelTest #test03HotelCanReceiveATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #HotelTest #test04HotelCanTakeAReservationForARoomAtFloor stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #HotelTest #test05HotelCanReceiveWithReservationATypeOfGuestInRoomAtFloor stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #HotelTest #test06HotelCannotReceiveWithReservationWithoutPreviousReservation stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #HotelTest #test07HotelProfitsAreTheSumOfEachFloorProfits stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #HotelTest #test08HotelLossesAreTheSumOfEachFloorLosses stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #HotelTest #test09HotelCannotReserveANonexistentRoom stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #HotelTest #test10HotelCannotReserveANonexistentFloor stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #HotelTest #test11HotelCannotReceiveAtNonexistentRoom stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #HotelTest #test12HotelCannotReceiveAtNonexistentFloor stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #HotelTest #test13HotelCannotReceiveWithReservationAtNonexistentRoom stamp: 'fb 4/29/2024 20:59:55'!
PASSED!

!testRun: #RoomTest #test01NewRoomsAreAvailable stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test02ReceivingAGuestMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test03ReservingARoomMakesTheRoomReservedAndOccupied stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test04CannotReceiveAGuestInAOccupiedRoom stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test05CannotReceiveAGuestInAReservedRoom stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test06ReceivingOnReservationMakesTheRoomOccupied stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test07CannotReceiveOnReservationAnAvailableRoom stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test08CannotReceiveOnReservationAnOccupiedRoom stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test09ProfitOfAvailableRoomIsCeroPesos stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test10ProfitOfReservedRoomIsHalfTheMinPriceInList stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test11ProfitOfOccupiedRoomDependsOnGuestType stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test12NoProfitOnOccupiedRoomByUnknownGuestType stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test13LossesOfAvailableRoomIsHalfTheMaxPriceInList stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test14LossesOfReservedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test15LossesOfOccupiedRoomIsCeroPesos stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test16CannotReserveWhenReserved stamp: 'fb 4/29/2024 20:59:57'!
PASSED!

!testRun: #RoomTest #test17CannotReserveWhenOccupied stamp: 'fb 4/29/2024 20:59:57'!
PASSED!